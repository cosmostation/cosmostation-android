// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: provenance/marker/v1/accessgrant.proto

package io.provenance.marker.v1;

/**
 * <pre>
 * Access defines the different types of permissions that a marker supports granting to an address.
 * </pre>
 *
 * Protobuf enum {@code provenance.marker.v1.Access}
 */
public enum Access
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * ACCESS_UNSPECIFIED defines a no-op vote option.
   * </pre>
   *
   * <code>ACCESS_UNSPECIFIED = 0 [(.gogoproto.enumvalue_customname) = "Unknown"];</code>
   */
  ACCESS_UNSPECIFIED(0),
  /**
   * <pre>
   * ACCESS_MINT is the ability to increase the supply of a marker
   * </pre>
   *
   * <code>ACCESS_MINT = 1 [(.gogoproto.enumvalue_customname) = "Mint"];</code>
   */
  ACCESS_MINT(1),
  /**
   * <pre>
   * ACCESS_BURN is the ability to decrease the supply of the marker using coin held by the marker.
   * </pre>
   *
   * <code>ACCESS_BURN = 2 [(.gogoproto.enumvalue_customname) = "Burn"];</code>
   */
  ACCESS_BURN(2),
  /**
   * <pre>
   * ACCESS_DEPOSIT is the ability to set a marker reference to this marker in the metadata/scopes module
   * </pre>
   *
   * <code>ACCESS_DEPOSIT = 3 [(.gogoproto.enumvalue_customname) = "Deposit"];</code>
   */
  ACCESS_DEPOSIT(3),
  /**
   * <pre>
   * ACCESS_WITHDRAW is the ability to remove marker references to this marker in from metadata/scopes or
   * transfer coin from this marker account to another account.
   * </pre>
   *
   * <code>ACCESS_WITHDRAW = 4 [(.gogoproto.enumvalue_customname) = "Withdraw"];</code>
   */
  ACCESS_WITHDRAW(4),
  /**
   * <pre>
   * ACCESS_DELETE is the ability to move a proposed, finalized or active marker into the cancelled state. This
   * access also allows cancelled markers to be marked for deletion
   * </pre>
   *
   * <code>ACCESS_DELETE = 5 [(.gogoproto.enumvalue_customname) = "Delete"];</code>
   */
  ACCESS_DELETE(5),
  /**
   * <pre>
   * ACCESS_ADMIN is the ability to add access grants for accounts to the list of marker permissions.
   * </pre>
   *
   * <code>ACCESS_ADMIN = 6 [(.gogoproto.enumvalue_customname) = "Admin"];</code>
   */
  ACCESS_ADMIN(6),
  /**
   * <pre>
   * ACCESS_TRANSFER is the ability to invoke a send operation using the marker module to facilitate exchange.
   * This access right is only supported on RESTRICTED markers.
   * </pre>
   *
   * <code>ACCESS_TRANSFER = 7 [(.gogoproto.enumvalue_customname) = "Transfer"];</code>
   */
  ACCESS_TRANSFER(7),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * ACCESS_UNSPECIFIED defines a no-op vote option.
   * </pre>
   *
   * <code>ACCESS_UNSPECIFIED = 0 [(.gogoproto.enumvalue_customname) = "Unknown"];</code>
   */
  public static final int ACCESS_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * ACCESS_MINT is the ability to increase the supply of a marker
   * </pre>
   *
   * <code>ACCESS_MINT = 1 [(.gogoproto.enumvalue_customname) = "Mint"];</code>
   */
  public static final int ACCESS_MINT_VALUE = 1;
  /**
   * <pre>
   * ACCESS_BURN is the ability to decrease the supply of the marker using coin held by the marker.
   * </pre>
   *
   * <code>ACCESS_BURN = 2 [(.gogoproto.enumvalue_customname) = "Burn"];</code>
   */
  public static final int ACCESS_BURN_VALUE = 2;
  /**
   * <pre>
   * ACCESS_DEPOSIT is the ability to set a marker reference to this marker in the metadata/scopes module
   * </pre>
   *
   * <code>ACCESS_DEPOSIT = 3 [(.gogoproto.enumvalue_customname) = "Deposit"];</code>
   */
  public static final int ACCESS_DEPOSIT_VALUE = 3;
  /**
   * <pre>
   * ACCESS_WITHDRAW is the ability to remove marker references to this marker in from metadata/scopes or
   * transfer coin from this marker account to another account.
   * </pre>
   *
   * <code>ACCESS_WITHDRAW = 4 [(.gogoproto.enumvalue_customname) = "Withdraw"];</code>
   */
  public static final int ACCESS_WITHDRAW_VALUE = 4;
  /**
   * <pre>
   * ACCESS_DELETE is the ability to move a proposed, finalized or active marker into the cancelled state. This
   * access also allows cancelled markers to be marked for deletion
   * </pre>
   *
   * <code>ACCESS_DELETE = 5 [(.gogoproto.enumvalue_customname) = "Delete"];</code>
   */
  public static final int ACCESS_DELETE_VALUE = 5;
  /**
   * <pre>
   * ACCESS_ADMIN is the ability to add access grants for accounts to the list of marker permissions.
   * </pre>
   *
   * <code>ACCESS_ADMIN = 6 [(.gogoproto.enumvalue_customname) = "Admin"];</code>
   */
  public static final int ACCESS_ADMIN_VALUE = 6;
  /**
   * <pre>
   * ACCESS_TRANSFER is the ability to invoke a send operation using the marker module to facilitate exchange.
   * This access right is only supported on RESTRICTED markers.
   * </pre>
   *
   * <code>ACCESS_TRANSFER = 7 [(.gogoproto.enumvalue_customname) = "Transfer"];</code>
   */
  public static final int ACCESS_TRANSFER_VALUE = 7;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static Access valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static Access forNumber(int value) {
    switch (value) {
      case 0: return ACCESS_UNSPECIFIED;
      case 1: return ACCESS_MINT;
      case 2: return ACCESS_BURN;
      case 3: return ACCESS_DEPOSIT;
      case 4: return ACCESS_WITHDRAW;
      case 5: return ACCESS_DELETE;
      case 6: return ACCESS_ADMIN;
      case 7: return ACCESS_TRANSFER;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Access>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      Access> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Access>() {
          public Access findValueByNumber(int number) {
            return Access.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return io.provenance.marker.v1.AccessGrantProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final Access[] VALUES = values();

  public static Access valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private Access(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:provenance.marker.v1.Access)
}

