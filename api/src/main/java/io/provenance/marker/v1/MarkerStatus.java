// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: provenance/marker/v1/marker.proto

package io.provenance.marker.v1;

/**
 * <pre>
 * MarkerStatus defines the various states a marker account can be in.
 * </pre>
 *
 * Protobuf enum {@code provenance.marker.v1.MarkerStatus}
 */
public enum MarkerStatus
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * MARKER_STATUS_UNSPECIFIED - Unknown/Invalid Marker Status
   * </pre>
   *
   * <code>MARKER_STATUS_UNSPECIFIED = 0 [(.gogoproto.enumvalue_customname) = "StatusUndefined"];</code>
   */
  MARKER_STATUS_UNSPECIFIED(0),
  /**
   * <pre>
   * MARKER_STATUS_PROPOSED - Initial configuration period, updates allowed, token supply not created.
   * </pre>
   *
   * <code>MARKER_STATUS_PROPOSED = 1 [(.gogoproto.enumvalue_customname) = "StatusProposed"];</code>
   */
  MARKER_STATUS_PROPOSED(1),
  /**
   * <pre>
   * MARKER_STATUS_FINALIZED - Configuration finalized, ready for supply creation
   * </pre>
   *
   * <code>MARKER_STATUS_FINALIZED = 2 [(.gogoproto.enumvalue_customname) = "StatusFinalized"];</code>
   */
  MARKER_STATUS_FINALIZED(2),
  /**
   * <pre>
   * MARKER_STATUS_ACTIVE - Supply is created, rules are in force.
   * </pre>
   *
   * <code>MARKER_STATUS_ACTIVE = 3 [(.gogoproto.enumvalue_customname) = "StatusActive"];</code>
   */
  MARKER_STATUS_ACTIVE(3),
  /**
   * <pre>
   * MARKER_STATUS_CANCELLED - Marker has been cancelled, pending destroy
   * </pre>
   *
   * <code>MARKER_STATUS_CANCELLED = 4 [(.gogoproto.enumvalue_customname) = "StatusCancelled"];</code>
   */
  MARKER_STATUS_CANCELLED(4),
  /**
   * <pre>
   * MARKER_STATUS_DESTROYED - Marker supply has all been recalled, marker is considered destroyed and no further
   * actions allowed.
   * </pre>
   *
   * <code>MARKER_STATUS_DESTROYED = 5 [(.gogoproto.enumvalue_customname) = "StatusDestroyed"];</code>
   */
  MARKER_STATUS_DESTROYED(5),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * MARKER_STATUS_UNSPECIFIED - Unknown/Invalid Marker Status
   * </pre>
   *
   * <code>MARKER_STATUS_UNSPECIFIED = 0 [(.gogoproto.enumvalue_customname) = "StatusUndefined"];</code>
   */
  public static final int MARKER_STATUS_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * MARKER_STATUS_PROPOSED - Initial configuration period, updates allowed, token supply not created.
   * </pre>
   *
   * <code>MARKER_STATUS_PROPOSED = 1 [(.gogoproto.enumvalue_customname) = "StatusProposed"];</code>
   */
  public static final int MARKER_STATUS_PROPOSED_VALUE = 1;
  /**
   * <pre>
   * MARKER_STATUS_FINALIZED - Configuration finalized, ready for supply creation
   * </pre>
   *
   * <code>MARKER_STATUS_FINALIZED = 2 [(.gogoproto.enumvalue_customname) = "StatusFinalized"];</code>
   */
  public static final int MARKER_STATUS_FINALIZED_VALUE = 2;
  /**
   * <pre>
   * MARKER_STATUS_ACTIVE - Supply is created, rules are in force.
   * </pre>
   *
   * <code>MARKER_STATUS_ACTIVE = 3 [(.gogoproto.enumvalue_customname) = "StatusActive"];</code>
   */
  public static final int MARKER_STATUS_ACTIVE_VALUE = 3;
  /**
   * <pre>
   * MARKER_STATUS_CANCELLED - Marker has been cancelled, pending destroy
   * </pre>
   *
   * <code>MARKER_STATUS_CANCELLED = 4 [(.gogoproto.enumvalue_customname) = "StatusCancelled"];</code>
   */
  public static final int MARKER_STATUS_CANCELLED_VALUE = 4;
  /**
   * <pre>
   * MARKER_STATUS_DESTROYED - Marker supply has all been recalled, marker is considered destroyed and no further
   * actions allowed.
   * </pre>
   *
   * <code>MARKER_STATUS_DESTROYED = 5 [(.gogoproto.enumvalue_customname) = "StatusDestroyed"];</code>
   */
  public static final int MARKER_STATUS_DESTROYED_VALUE = 5;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static MarkerStatus valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static MarkerStatus forNumber(int value) {
    switch (value) {
      case 0: return MARKER_STATUS_UNSPECIFIED;
      case 1: return MARKER_STATUS_PROPOSED;
      case 2: return MARKER_STATUS_FINALIZED;
      case 3: return MARKER_STATUS_ACTIVE;
      case 4: return MARKER_STATUS_CANCELLED;
      case 5: return MARKER_STATUS_DESTROYED;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<MarkerStatus>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      MarkerStatus> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<MarkerStatus>() {
          public MarkerStatus findValueByNumber(int number) {
            return MarkerStatus.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return io.provenance.marker.v1.Marker.getDescriptor().getEnumTypes().get(1);
  }

  private static final MarkerStatus[] VALUES = values();

  public static MarkerStatus valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private MarkerStatus(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:provenance.marker.v1.MarkerStatus)
}

