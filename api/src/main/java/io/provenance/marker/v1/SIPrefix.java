// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: provenance/marker/v1/si.proto

package io.provenance.marker.v1;

/**
 * <pre>
 * SIPrefix represents an International System of Units (SI) Prefix.
 * </pre>
 *
 * Protobuf enum {@code provenance.marker.v1.SIPrefix}
 */
public enum SIPrefix
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * 10^0    (none)
   * </pre>
   *
   * <code>SI_PREFIX_NONE = 0;</code>
   */
  SI_PREFIX_NONE(0),
  /**
   * <pre>
   * 10^1    deka   da
   * </pre>
   *
   * <code>SI_PREFIX_DEKA = 1;</code>
   */
  SI_PREFIX_DEKA(1),
  /**
   * <pre>
   * 10^2    hecto   h
   * </pre>
   *
   * <code>SI_PREFIX_HECTO = 2;</code>
   */
  SI_PREFIX_HECTO(2),
  /**
   * <pre>
   * 10^3    kilo    k
   * </pre>
   *
   * <code>SI_PREFIX_KILO = 3;</code>
   */
  SI_PREFIX_KILO(3),
  /**
   * <pre>
   * 10^6    mega    M
   * </pre>
   *
   * <code>SI_PREFIX_MEGA = 6;</code>
   */
  SI_PREFIX_MEGA(6),
  /**
   * <pre>
   * 10^9    giga    G
   * </pre>
   *
   * <code>SI_PREFIX_GIGA = 9;</code>
   */
  SI_PREFIX_GIGA(9),
  /**
   * <pre>
   * 10^12   tera    T
   * </pre>
   *
   * <code>SI_PREFIX_TERA = 12;</code>
   */
  SI_PREFIX_TERA(12),
  /**
   * <pre>
   * 10^15   peta    P
   * </pre>
   *
   * <code>SI_PREFIX_PETA = 15;</code>
   */
  SI_PREFIX_PETA(15),
  /**
   * <pre>
   * 10^18   exa     E
   * </pre>
   *
   * <code>SI_PREFIX_EXA = 18;</code>
   */
  SI_PREFIX_EXA(18),
  /**
   * <pre>
   * 10^21   zetta   Z
   * </pre>
   *
   * <code>SI_PREFIX_ZETTA = 21;</code>
   */
  SI_PREFIX_ZETTA(21),
  /**
   * <pre>
   * 10^24   yotta   Y
   * </pre>
   *
   * <code>SI_PREFIX_YOTTA = 24;</code>
   */
  SI_PREFIX_YOTTA(24),
  /**
   * <pre>
   * 10^-1   deci    d
   * </pre>
   *
   * <code>SI_PREFIX_DECI = -1;</code>
   */
  SI_PREFIX_DECI(-1),
  /**
   * <pre>
   * 10^-2   centi   c
   * </pre>
   *
   * <code>SI_PREFIX_CENTI = -2;</code>
   */
  SI_PREFIX_CENTI(-2),
  /**
   * <pre>
   * 10^-3   milli   m
   * </pre>
   *
   * <code>SI_PREFIX_MILLI = -3;</code>
   */
  SI_PREFIX_MILLI(-3),
  /**
   * <pre>
   * 10^-6   micro   µ
   * </pre>
   *
   * <code>SI_PREFIX_MICRO = -6;</code>
   */
  SI_PREFIX_MICRO(-6),
  /**
   * <pre>
   * 10^-9   nano    n
   * </pre>
   *
   * <code>SI_PREFIX_NANO = -9;</code>
   */
  SI_PREFIX_NANO(-9),
  /**
   * <pre>
   * 10^-12  pico    p
   * </pre>
   *
   * <code>SI_PREFIX_PICO = -12;</code>
   */
  SI_PREFIX_PICO(-12),
  /**
   * <pre>
   * 10^-15  femto   f
   * </pre>
   *
   * <code>SI_PREFIX_FEMTO = -15;</code>
   */
  SI_PREFIX_FEMTO(-15),
  /**
   * <pre>
   * 10^-18  atto    a
   * </pre>
   *
   * <code>SI_PREFIX_ATTO = -18;</code>
   */
  SI_PREFIX_ATTO(-18),
  /**
   * <pre>
   * 10^-21  zepto   z
   * </pre>
   *
   * <code>SI_PREFIX_ZEPTO = -21;</code>
   */
  SI_PREFIX_ZEPTO(-21),
  /**
   * <pre>
   * 10^-24  yocto   y
   * </pre>
   *
   * <code>SI_PREFIX_YOCTO = -24;</code>
   */
  SI_PREFIX_YOCTO(-24),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * 10^0    (none)
   * </pre>
   *
   * <code>SI_PREFIX_NONE = 0;</code>
   */
  public static final int SI_PREFIX_NONE_VALUE = 0;
  /**
   * <pre>
   * 10^1    deka   da
   * </pre>
   *
   * <code>SI_PREFIX_DEKA = 1;</code>
   */
  public static final int SI_PREFIX_DEKA_VALUE = 1;
  /**
   * <pre>
   * 10^2    hecto   h
   * </pre>
   *
   * <code>SI_PREFIX_HECTO = 2;</code>
   */
  public static final int SI_PREFIX_HECTO_VALUE = 2;
  /**
   * <pre>
   * 10^3    kilo    k
   * </pre>
   *
   * <code>SI_PREFIX_KILO = 3;</code>
   */
  public static final int SI_PREFIX_KILO_VALUE = 3;
  /**
   * <pre>
   * 10^6    mega    M
   * </pre>
   *
   * <code>SI_PREFIX_MEGA = 6;</code>
   */
  public static final int SI_PREFIX_MEGA_VALUE = 6;
  /**
   * <pre>
   * 10^9    giga    G
   * </pre>
   *
   * <code>SI_PREFIX_GIGA = 9;</code>
   */
  public static final int SI_PREFIX_GIGA_VALUE = 9;
  /**
   * <pre>
   * 10^12   tera    T
   * </pre>
   *
   * <code>SI_PREFIX_TERA = 12;</code>
   */
  public static final int SI_PREFIX_TERA_VALUE = 12;
  /**
   * <pre>
   * 10^15   peta    P
   * </pre>
   *
   * <code>SI_PREFIX_PETA = 15;</code>
   */
  public static final int SI_PREFIX_PETA_VALUE = 15;
  /**
   * <pre>
   * 10^18   exa     E
   * </pre>
   *
   * <code>SI_PREFIX_EXA = 18;</code>
   */
  public static final int SI_PREFIX_EXA_VALUE = 18;
  /**
   * <pre>
   * 10^21   zetta   Z
   * </pre>
   *
   * <code>SI_PREFIX_ZETTA = 21;</code>
   */
  public static final int SI_PREFIX_ZETTA_VALUE = 21;
  /**
   * <pre>
   * 10^24   yotta   Y
   * </pre>
   *
   * <code>SI_PREFIX_YOTTA = 24;</code>
   */
  public static final int SI_PREFIX_YOTTA_VALUE = 24;
  /**
   * <pre>
   * 10^-1   deci    d
   * </pre>
   *
   * <code>SI_PREFIX_DECI = -1;</code>
   */
  public static final int SI_PREFIX_DECI_VALUE = -1;
  /**
   * <pre>
   * 10^-2   centi   c
   * </pre>
   *
   * <code>SI_PREFIX_CENTI = -2;</code>
   */
  public static final int SI_PREFIX_CENTI_VALUE = -2;
  /**
   * <pre>
   * 10^-3   milli   m
   * </pre>
   *
   * <code>SI_PREFIX_MILLI = -3;</code>
   */
  public static final int SI_PREFIX_MILLI_VALUE = -3;
  /**
   * <pre>
   * 10^-6   micro   µ
   * </pre>
   *
   * <code>SI_PREFIX_MICRO = -6;</code>
   */
  public static final int SI_PREFIX_MICRO_VALUE = -6;
  /**
   * <pre>
   * 10^-9   nano    n
   * </pre>
   *
   * <code>SI_PREFIX_NANO = -9;</code>
   */
  public static final int SI_PREFIX_NANO_VALUE = -9;
  /**
   * <pre>
   * 10^-12  pico    p
   * </pre>
   *
   * <code>SI_PREFIX_PICO = -12;</code>
   */
  public static final int SI_PREFIX_PICO_VALUE = -12;
  /**
   * <pre>
   * 10^-15  femto   f
   * </pre>
   *
   * <code>SI_PREFIX_FEMTO = -15;</code>
   */
  public static final int SI_PREFIX_FEMTO_VALUE = -15;
  /**
   * <pre>
   * 10^-18  atto    a
   * </pre>
   *
   * <code>SI_PREFIX_ATTO = -18;</code>
   */
  public static final int SI_PREFIX_ATTO_VALUE = -18;
  /**
   * <pre>
   * 10^-21  zepto   z
   * </pre>
   *
   * <code>SI_PREFIX_ZEPTO = -21;</code>
   */
  public static final int SI_PREFIX_ZEPTO_VALUE = -21;
  /**
   * <pre>
   * 10^-24  yocto   y
   * </pre>
   *
   * <code>SI_PREFIX_YOCTO = -24;</code>
   */
  public static final int SI_PREFIX_YOCTO_VALUE = -24;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static SIPrefix valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static SIPrefix forNumber(int value) {
    switch (value) {
      case 0: return SI_PREFIX_NONE;
      case 1: return SI_PREFIX_DEKA;
      case 2: return SI_PREFIX_HECTO;
      case 3: return SI_PREFIX_KILO;
      case 6: return SI_PREFIX_MEGA;
      case 9: return SI_PREFIX_GIGA;
      case 12: return SI_PREFIX_TERA;
      case 15: return SI_PREFIX_PETA;
      case 18: return SI_PREFIX_EXA;
      case 21: return SI_PREFIX_ZETTA;
      case 24: return SI_PREFIX_YOTTA;
      case -1: return SI_PREFIX_DECI;
      case -2: return SI_PREFIX_CENTI;
      case -3: return SI_PREFIX_MILLI;
      case -6: return SI_PREFIX_MICRO;
      case -9: return SI_PREFIX_NANO;
      case -12: return SI_PREFIX_PICO;
      case -15: return SI_PREFIX_FEMTO;
      case -18: return SI_PREFIX_ATTO;
      case -21: return SI_PREFIX_ZEPTO;
      case -24: return SI_PREFIX_YOCTO;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<SIPrefix>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      SIPrefix> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<SIPrefix>() {
          public SIPrefix findValueByNumber(int number) {
            return SIPrefix.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return io.provenance.marker.v1.Si.getDescriptor().getEnumTypes().get(0);
  }

  private static final SIPrefix[] VALUES = values();

  public static SIPrefix valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private SIPrefix(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:provenance.marker.v1.SIPrefix)
}

