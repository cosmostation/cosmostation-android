// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: provenance/msgfees/v1/query.proto

package io.provenance.msgfees.v1;

public interface CalculateTxFeesResponseOrBuilder extends
    // @@protoc_insertion_point(interface_extends:provenance.msgfees.v1.CalculateTxFeesResponse)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * additional_fees are the amount of coins to be for addition msg fees
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  java.util.List<cosmos.base.v1beta1.CoinOuterClass.Coin> 
      getAdditionalFeesList();
  /**
   * <pre>
   * additional_fees are the amount of coins to be for addition msg fees
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  cosmos.base.v1beta1.CoinOuterClass.Coin getAdditionalFees(int index);
  /**
   * <pre>
   * additional_fees are the amount of coins to be for addition msg fees
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  int getAdditionalFeesCount();
  /**
   * <pre>
   * additional_fees are the amount of coins to be for addition msg fees
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  java.util.List<? extends cosmos.base.v1beta1.CoinOuterClass.CoinOrBuilder> 
      getAdditionalFeesOrBuilderList();
  /**
   * <pre>
   * additional_fees are the amount of coins to be for addition msg fees
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  cosmos.base.v1beta1.CoinOuterClass.CoinOrBuilder getAdditionalFeesOrBuilder(
      int index);

  /**
   * <pre>
   * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
   * note: the gas fee is calculated with the min gas fee param as a constant
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  java.util.List<cosmos.base.v1beta1.CoinOuterClass.Coin> 
      getTotalFeesList();
  /**
   * <pre>
   * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
   * note: the gas fee is calculated with the min gas fee param as a constant
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  cosmos.base.v1beta1.CoinOuterClass.Coin getTotalFees(int index);
  /**
   * <pre>
   * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
   * note: the gas fee is calculated with the min gas fee param as a constant
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  int getTotalFeesCount();
  /**
   * <pre>
   * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
   * note: the gas fee is calculated with the min gas fee param as a constant
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  java.util.List<? extends cosmos.base.v1beta1.CoinOuterClass.CoinOrBuilder> 
      getTotalFeesOrBuilderList();
  /**
   * <pre>
   * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
   * note: the gas fee is calculated with the min gas fee param as a constant
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  cosmos.base.v1beta1.CoinOuterClass.CoinOrBuilder getTotalFeesOrBuilder(
      int index);

  /**
   * <pre>
   * estimated_gas is the amount of gas needed for the transaction
   * </pre>
   *
   * <code>uint64 estimated_gas = 3 [(.gogoproto.moretags) = "yaml:&#92;"estimated_gas&#92;""];</code>
   * @return The estimatedGas.
   */
  long getEstimatedGas();
}
