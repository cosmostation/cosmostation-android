// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: provenance/msgfees/v1/query.proto

package io.provenance.msgfees.v1;

/**
 * <pre>
 * CalculateTxFeesResponse is the response type for the Query RPC method.
 * </pre>
 *
 * Protobuf type {@code provenance.msgfees.v1.CalculateTxFeesResponse}
 */
public final class CalculateTxFeesResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:provenance.msgfees.v1.CalculateTxFeesResponse)
    CalculateTxFeesResponseOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CalculateTxFeesResponse.newBuilder() to construct.
  private CalculateTxFeesResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CalculateTxFeesResponse() {
    additionalFees_ = java.util.Collections.emptyList();
    totalFees_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new CalculateTxFeesResponse();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private CalculateTxFeesResponse(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              additionalFees_ = new java.util.ArrayList<cosmos.base.v1beta1.CoinOuterClass.Coin>();
              mutable_bitField0_ |= 0x00000001;
            }
            additionalFees_.add(
                input.readMessage(cosmos.base.v1beta1.CoinOuterClass.Coin.parser(), extensionRegistry));
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              totalFees_ = new java.util.ArrayList<cosmos.base.v1beta1.CoinOuterClass.Coin>();
              mutable_bitField0_ |= 0x00000002;
            }
            totalFees_.add(
                input.readMessage(cosmos.base.v1beta1.CoinOuterClass.Coin.parser(), extensionRegistry));
            break;
          }
          case 24: {

            estimatedGas_ = input.readUInt64();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        additionalFees_ = java.util.Collections.unmodifiableList(additionalFees_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        totalFees_ = java.util.Collections.unmodifiableList(totalFees_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.provenance.msgfees.v1.QueryOuterClass.internal_static_provenance_msgfees_v1_CalculateTxFeesResponse_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.provenance.msgfees.v1.QueryOuterClass.internal_static_provenance_msgfees_v1_CalculateTxFeesResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.provenance.msgfees.v1.CalculateTxFeesResponse.class, io.provenance.msgfees.v1.CalculateTxFeesResponse.Builder.class);
  }

  public static final int ADDITIONAL_FEES_FIELD_NUMBER = 1;
  private java.util.List<cosmos.base.v1beta1.CoinOuterClass.Coin> additionalFees_;
  /**
   * <pre>
   * additional_fees are the amount of coins to be for addition msg fees
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public java.util.List<cosmos.base.v1beta1.CoinOuterClass.Coin> getAdditionalFeesList() {
    return additionalFees_;
  }
  /**
   * <pre>
   * additional_fees are the amount of coins to be for addition msg fees
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends cosmos.base.v1beta1.CoinOuterClass.CoinOrBuilder> 
      getAdditionalFeesOrBuilderList() {
    return additionalFees_;
  }
  /**
   * <pre>
   * additional_fees are the amount of coins to be for addition msg fees
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public int getAdditionalFeesCount() {
    return additionalFees_.size();
  }
  /**
   * <pre>
   * additional_fees are the amount of coins to be for addition msg fees
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public cosmos.base.v1beta1.CoinOuterClass.Coin getAdditionalFees(int index) {
    return additionalFees_.get(index);
  }
  /**
   * <pre>
   * additional_fees are the amount of coins to be for addition msg fees
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public cosmos.base.v1beta1.CoinOuterClass.CoinOrBuilder getAdditionalFeesOrBuilder(
      int index) {
    return additionalFees_.get(index);
  }

  public static final int TOTAL_FEES_FIELD_NUMBER = 2;
  private java.util.List<cosmos.base.v1beta1.CoinOuterClass.Coin> totalFees_;
  /**
   * <pre>
   * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
   * note: the gas fee is calculated with the min gas fee param as a constant
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public java.util.List<cosmos.base.v1beta1.CoinOuterClass.Coin> getTotalFeesList() {
    return totalFees_;
  }
  /**
   * <pre>
   * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
   * note: the gas fee is calculated with the min gas fee param as a constant
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends cosmos.base.v1beta1.CoinOuterClass.CoinOrBuilder> 
      getTotalFeesOrBuilderList() {
    return totalFees_;
  }
  /**
   * <pre>
   * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
   * note: the gas fee is calculated with the min gas fee param as a constant
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public int getTotalFeesCount() {
    return totalFees_.size();
  }
  /**
   * <pre>
   * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
   * note: the gas fee is calculated with the min gas fee param as a constant
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public cosmos.base.v1beta1.CoinOuterClass.Coin getTotalFees(int index) {
    return totalFees_.get(index);
  }
  /**
   * <pre>
   * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
   * note: the gas fee is calculated with the min gas fee param as a constant
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public cosmos.base.v1beta1.CoinOuterClass.CoinOrBuilder getTotalFeesOrBuilder(
      int index) {
    return totalFees_.get(index);
  }

  public static final int ESTIMATED_GAS_FIELD_NUMBER = 3;
  private long estimatedGas_;
  /**
   * <pre>
   * estimated_gas is the amount of gas needed for the transaction
   * </pre>
   *
   * <code>uint64 estimated_gas = 3 [(.gogoproto.moretags) = "yaml:&#92;"estimated_gas&#92;""];</code>
   * @return The estimatedGas.
   */
  @java.lang.Override
  public long getEstimatedGas() {
    return estimatedGas_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < additionalFees_.size(); i++) {
      output.writeMessage(1, additionalFees_.get(i));
    }
    for (int i = 0; i < totalFees_.size(); i++) {
      output.writeMessage(2, totalFees_.get(i));
    }
    if (estimatedGas_ != 0L) {
      output.writeUInt64(3, estimatedGas_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < additionalFees_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, additionalFees_.get(i));
    }
    for (int i = 0; i < totalFees_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, totalFees_.get(i));
    }
    if (estimatedGas_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(3, estimatedGas_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.provenance.msgfees.v1.CalculateTxFeesResponse)) {
      return super.equals(obj);
    }
    io.provenance.msgfees.v1.CalculateTxFeesResponse other = (io.provenance.msgfees.v1.CalculateTxFeesResponse) obj;

    if (!getAdditionalFeesList()
        .equals(other.getAdditionalFeesList())) return false;
    if (!getTotalFeesList()
        .equals(other.getTotalFeesList())) return false;
    if (getEstimatedGas()
        != other.getEstimatedGas()) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getAdditionalFeesCount() > 0) {
      hash = (37 * hash) + ADDITIONAL_FEES_FIELD_NUMBER;
      hash = (53 * hash) + getAdditionalFeesList().hashCode();
    }
    if (getTotalFeesCount() > 0) {
      hash = (37 * hash) + TOTAL_FEES_FIELD_NUMBER;
      hash = (53 * hash) + getTotalFeesList().hashCode();
    }
    hash = (37 * hash) + ESTIMATED_GAS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getEstimatedGas());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.provenance.msgfees.v1.CalculateTxFeesResponse parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.provenance.msgfees.v1.CalculateTxFeesResponse parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.provenance.msgfees.v1.CalculateTxFeesResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.provenance.msgfees.v1.CalculateTxFeesResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.provenance.msgfees.v1.CalculateTxFeesResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.provenance.msgfees.v1.CalculateTxFeesResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.provenance.msgfees.v1.CalculateTxFeesResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.provenance.msgfees.v1.CalculateTxFeesResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.provenance.msgfees.v1.CalculateTxFeesResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.provenance.msgfees.v1.CalculateTxFeesResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.provenance.msgfees.v1.CalculateTxFeesResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.provenance.msgfees.v1.CalculateTxFeesResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.provenance.msgfees.v1.CalculateTxFeesResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * CalculateTxFeesResponse is the response type for the Query RPC method.
   * </pre>
   *
   * Protobuf type {@code provenance.msgfees.v1.CalculateTxFeesResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:provenance.msgfees.v1.CalculateTxFeesResponse)
      io.provenance.msgfees.v1.CalculateTxFeesResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.provenance.msgfees.v1.QueryOuterClass.internal_static_provenance_msgfees_v1_CalculateTxFeesResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.provenance.msgfees.v1.QueryOuterClass.internal_static_provenance_msgfees_v1_CalculateTxFeesResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.provenance.msgfees.v1.CalculateTxFeesResponse.class, io.provenance.msgfees.v1.CalculateTxFeesResponse.Builder.class);
    }

    // Construct using io.provenance.msgfees.v1.CalculateTxFeesResponse.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getAdditionalFeesFieldBuilder();
        getTotalFeesFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (additionalFeesBuilder_ == null) {
        additionalFees_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        additionalFeesBuilder_.clear();
      }
      if (totalFeesBuilder_ == null) {
        totalFees_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        totalFeesBuilder_.clear();
      }
      estimatedGas_ = 0L;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.provenance.msgfees.v1.QueryOuterClass.internal_static_provenance_msgfees_v1_CalculateTxFeesResponse_descriptor;
    }

    @java.lang.Override
    public io.provenance.msgfees.v1.CalculateTxFeesResponse getDefaultInstanceForType() {
      return io.provenance.msgfees.v1.CalculateTxFeesResponse.getDefaultInstance();
    }

    @java.lang.Override
    public io.provenance.msgfees.v1.CalculateTxFeesResponse build() {
      io.provenance.msgfees.v1.CalculateTxFeesResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.provenance.msgfees.v1.CalculateTxFeesResponse buildPartial() {
      io.provenance.msgfees.v1.CalculateTxFeesResponse result = new io.provenance.msgfees.v1.CalculateTxFeesResponse(this);
      int from_bitField0_ = bitField0_;
      if (additionalFeesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          additionalFees_ = java.util.Collections.unmodifiableList(additionalFees_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.additionalFees_ = additionalFees_;
      } else {
        result.additionalFees_ = additionalFeesBuilder_.build();
      }
      if (totalFeesBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          totalFees_ = java.util.Collections.unmodifiableList(totalFees_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.totalFees_ = totalFees_;
      } else {
        result.totalFees_ = totalFeesBuilder_.build();
      }
      result.estimatedGas_ = estimatedGas_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.provenance.msgfees.v1.CalculateTxFeesResponse) {
        return mergeFrom((io.provenance.msgfees.v1.CalculateTxFeesResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.provenance.msgfees.v1.CalculateTxFeesResponse other) {
      if (other == io.provenance.msgfees.v1.CalculateTxFeesResponse.getDefaultInstance()) return this;
      if (additionalFeesBuilder_ == null) {
        if (!other.additionalFees_.isEmpty()) {
          if (additionalFees_.isEmpty()) {
            additionalFees_ = other.additionalFees_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureAdditionalFeesIsMutable();
            additionalFees_.addAll(other.additionalFees_);
          }
          onChanged();
        }
      } else {
        if (!other.additionalFees_.isEmpty()) {
          if (additionalFeesBuilder_.isEmpty()) {
            additionalFeesBuilder_.dispose();
            additionalFeesBuilder_ = null;
            additionalFees_ = other.additionalFees_;
            bitField0_ = (bitField0_ & ~0x00000001);
            additionalFeesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getAdditionalFeesFieldBuilder() : null;
          } else {
            additionalFeesBuilder_.addAllMessages(other.additionalFees_);
          }
        }
      }
      if (totalFeesBuilder_ == null) {
        if (!other.totalFees_.isEmpty()) {
          if (totalFees_.isEmpty()) {
            totalFees_ = other.totalFees_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureTotalFeesIsMutable();
            totalFees_.addAll(other.totalFees_);
          }
          onChanged();
        }
      } else {
        if (!other.totalFees_.isEmpty()) {
          if (totalFeesBuilder_.isEmpty()) {
            totalFeesBuilder_.dispose();
            totalFeesBuilder_ = null;
            totalFees_ = other.totalFees_;
            bitField0_ = (bitField0_ & ~0x00000002);
            totalFeesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getTotalFeesFieldBuilder() : null;
          } else {
            totalFeesBuilder_.addAllMessages(other.totalFees_);
          }
        }
      }
      if (other.getEstimatedGas() != 0L) {
        setEstimatedGas(other.getEstimatedGas());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.provenance.msgfees.v1.CalculateTxFeesResponse parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.provenance.msgfees.v1.CalculateTxFeesResponse) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<cosmos.base.v1beta1.CoinOuterClass.Coin> additionalFees_ =
      java.util.Collections.emptyList();
    private void ensureAdditionalFeesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        additionalFees_ = new java.util.ArrayList<cosmos.base.v1beta1.CoinOuterClass.Coin>(additionalFees_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        cosmos.base.v1beta1.CoinOuterClass.Coin, cosmos.base.v1beta1.CoinOuterClass.Coin.Builder, cosmos.base.v1beta1.CoinOuterClass.CoinOrBuilder> additionalFeesBuilder_;

    /**
     * <pre>
     * additional_fees are the amount of coins to be for addition msg fees
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<cosmos.base.v1beta1.CoinOuterClass.Coin> getAdditionalFeesList() {
      if (additionalFeesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(additionalFees_);
      } else {
        return additionalFeesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * additional_fees are the amount of coins to be for addition msg fees
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public int getAdditionalFeesCount() {
      if (additionalFeesBuilder_ == null) {
        return additionalFees_.size();
      } else {
        return additionalFeesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * additional_fees are the amount of coins to be for addition msg fees
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public cosmos.base.v1beta1.CoinOuterClass.Coin getAdditionalFees(int index) {
      if (additionalFeesBuilder_ == null) {
        return additionalFees_.get(index);
      } else {
        return additionalFeesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * additional_fees are the amount of coins to be for addition msg fees
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder setAdditionalFees(
        int index, cosmos.base.v1beta1.CoinOuterClass.Coin value) {
      if (additionalFeesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAdditionalFeesIsMutable();
        additionalFees_.set(index, value);
        onChanged();
      } else {
        additionalFeesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * additional_fees are the amount of coins to be for addition msg fees
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder setAdditionalFees(
        int index, cosmos.base.v1beta1.CoinOuterClass.Coin.Builder builderForValue) {
      if (additionalFeesBuilder_ == null) {
        ensureAdditionalFeesIsMutable();
        additionalFees_.set(index, builderForValue.build());
        onChanged();
      } else {
        additionalFeesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * additional_fees are the amount of coins to be for addition msg fees
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addAdditionalFees(cosmos.base.v1beta1.CoinOuterClass.Coin value) {
      if (additionalFeesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAdditionalFeesIsMutable();
        additionalFees_.add(value);
        onChanged();
      } else {
        additionalFeesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * additional_fees are the amount of coins to be for addition msg fees
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addAdditionalFees(
        int index, cosmos.base.v1beta1.CoinOuterClass.Coin value) {
      if (additionalFeesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAdditionalFeesIsMutable();
        additionalFees_.add(index, value);
        onChanged();
      } else {
        additionalFeesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * additional_fees are the amount of coins to be for addition msg fees
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addAdditionalFees(
        cosmos.base.v1beta1.CoinOuterClass.Coin.Builder builderForValue) {
      if (additionalFeesBuilder_ == null) {
        ensureAdditionalFeesIsMutable();
        additionalFees_.add(builderForValue.build());
        onChanged();
      } else {
        additionalFeesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * additional_fees are the amount of coins to be for addition msg fees
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addAdditionalFees(
        int index, cosmos.base.v1beta1.CoinOuterClass.Coin.Builder builderForValue) {
      if (additionalFeesBuilder_ == null) {
        ensureAdditionalFeesIsMutable();
        additionalFees_.add(index, builderForValue.build());
        onChanged();
      } else {
        additionalFeesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * additional_fees are the amount of coins to be for addition msg fees
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addAllAdditionalFees(
        java.lang.Iterable<? extends cosmos.base.v1beta1.CoinOuterClass.Coin> values) {
      if (additionalFeesBuilder_ == null) {
        ensureAdditionalFeesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, additionalFees_);
        onChanged();
      } else {
        additionalFeesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * additional_fees are the amount of coins to be for addition msg fees
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder clearAdditionalFees() {
      if (additionalFeesBuilder_ == null) {
        additionalFees_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        additionalFeesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * additional_fees are the amount of coins to be for addition msg fees
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder removeAdditionalFees(int index) {
      if (additionalFeesBuilder_ == null) {
        ensureAdditionalFeesIsMutable();
        additionalFees_.remove(index);
        onChanged();
      } else {
        additionalFeesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * additional_fees are the amount of coins to be for addition msg fees
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public cosmos.base.v1beta1.CoinOuterClass.Coin.Builder getAdditionalFeesBuilder(
        int index) {
      return getAdditionalFeesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * additional_fees are the amount of coins to be for addition msg fees
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public cosmos.base.v1beta1.CoinOuterClass.CoinOrBuilder getAdditionalFeesOrBuilder(
        int index) {
      if (additionalFeesBuilder_ == null) {
        return additionalFees_.get(index);  } else {
        return additionalFeesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * additional_fees are the amount of coins to be for addition msg fees
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<? extends cosmos.base.v1beta1.CoinOuterClass.CoinOrBuilder> 
         getAdditionalFeesOrBuilderList() {
      if (additionalFeesBuilder_ != null) {
        return additionalFeesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(additionalFees_);
      }
    }
    /**
     * <pre>
     * additional_fees are the amount of coins to be for addition msg fees
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public cosmos.base.v1beta1.CoinOuterClass.Coin.Builder addAdditionalFeesBuilder() {
      return getAdditionalFeesFieldBuilder().addBuilder(
          cosmos.base.v1beta1.CoinOuterClass.Coin.getDefaultInstance());
    }
    /**
     * <pre>
     * additional_fees are the amount of coins to be for addition msg fees
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public cosmos.base.v1beta1.CoinOuterClass.Coin.Builder addAdditionalFeesBuilder(
        int index) {
      return getAdditionalFeesFieldBuilder().addBuilder(
          index, cosmos.base.v1beta1.CoinOuterClass.Coin.getDefaultInstance());
    }
    /**
     * <pre>
     * additional_fees are the amount of coins to be for addition msg fees
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin additional_fees = 1 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<cosmos.base.v1beta1.CoinOuterClass.Coin.Builder> 
         getAdditionalFeesBuilderList() {
      return getAdditionalFeesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        cosmos.base.v1beta1.CoinOuterClass.Coin, cosmos.base.v1beta1.CoinOuterClass.Coin.Builder, cosmos.base.v1beta1.CoinOuterClass.CoinOrBuilder> 
        getAdditionalFeesFieldBuilder() {
      if (additionalFeesBuilder_ == null) {
        additionalFeesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            cosmos.base.v1beta1.CoinOuterClass.Coin, cosmos.base.v1beta1.CoinOuterClass.Coin.Builder, cosmos.base.v1beta1.CoinOuterClass.CoinOrBuilder>(
                additionalFees_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        additionalFees_ = null;
      }
      return additionalFeesBuilder_;
    }

    private java.util.List<cosmos.base.v1beta1.CoinOuterClass.Coin> totalFees_ =
      java.util.Collections.emptyList();
    private void ensureTotalFeesIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        totalFees_ = new java.util.ArrayList<cosmos.base.v1beta1.CoinOuterClass.Coin>(totalFees_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        cosmos.base.v1beta1.CoinOuterClass.Coin, cosmos.base.v1beta1.CoinOuterClass.Coin.Builder, cosmos.base.v1beta1.CoinOuterClass.CoinOrBuilder> totalFeesBuilder_;

    /**
     * <pre>
     * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
     * note: the gas fee is calculated with the min gas fee param as a constant
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<cosmos.base.v1beta1.CoinOuterClass.Coin> getTotalFeesList() {
      if (totalFeesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(totalFees_);
      } else {
        return totalFeesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
     * note: the gas fee is calculated with the min gas fee param as a constant
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public int getTotalFeesCount() {
      if (totalFeesBuilder_ == null) {
        return totalFees_.size();
      } else {
        return totalFeesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
     * note: the gas fee is calculated with the min gas fee param as a constant
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public cosmos.base.v1beta1.CoinOuterClass.Coin getTotalFees(int index) {
      if (totalFeesBuilder_ == null) {
        return totalFees_.get(index);
      } else {
        return totalFeesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
     * note: the gas fee is calculated with the min gas fee param as a constant
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder setTotalFees(
        int index, cosmos.base.v1beta1.CoinOuterClass.Coin value) {
      if (totalFeesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTotalFeesIsMutable();
        totalFees_.set(index, value);
        onChanged();
      } else {
        totalFeesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
     * note: the gas fee is calculated with the min gas fee param as a constant
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder setTotalFees(
        int index, cosmos.base.v1beta1.CoinOuterClass.Coin.Builder builderForValue) {
      if (totalFeesBuilder_ == null) {
        ensureTotalFeesIsMutable();
        totalFees_.set(index, builderForValue.build());
        onChanged();
      } else {
        totalFeesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
     * note: the gas fee is calculated with the min gas fee param as a constant
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addTotalFees(cosmos.base.v1beta1.CoinOuterClass.Coin value) {
      if (totalFeesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTotalFeesIsMutable();
        totalFees_.add(value);
        onChanged();
      } else {
        totalFeesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
     * note: the gas fee is calculated with the min gas fee param as a constant
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addTotalFees(
        int index, cosmos.base.v1beta1.CoinOuterClass.Coin value) {
      if (totalFeesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTotalFeesIsMutable();
        totalFees_.add(index, value);
        onChanged();
      } else {
        totalFeesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
     * note: the gas fee is calculated with the min gas fee param as a constant
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addTotalFees(
        cosmos.base.v1beta1.CoinOuterClass.Coin.Builder builderForValue) {
      if (totalFeesBuilder_ == null) {
        ensureTotalFeesIsMutable();
        totalFees_.add(builderForValue.build());
        onChanged();
      } else {
        totalFeesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
     * note: the gas fee is calculated with the min gas fee param as a constant
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addTotalFees(
        int index, cosmos.base.v1beta1.CoinOuterClass.Coin.Builder builderForValue) {
      if (totalFeesBuilder_ == null) {
        ensureTotalFeesIsMutable();
        totalFees_.add(index, builderForValue.build());
        onChanged();
      } else {
        totalFeesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
     * note: the gas fee is calculated with the min gas fee param as a constant
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addAllTotalFees(
        java.lang.Iterable<? extends cosmos.base.v1beta1.CoinOuterClass.Coin> values) {
      if (totalFeesBuilder_ == null) {
        ensureTotalFeesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, totalFees_);
        onChanged();
      } else {
        totalFeesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
     * note: the gas fee is calculated with the min gas fee param as a constant
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder clearTotalFees() {
      if (totalFeesBuilder_ == null) {
        totalFees_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        totalFeesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
     * note: the gas fee is calculated with the min gas fee param as a constant
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder removeTotalFees(int index) {
      if (totalFeesBuilder_ == null) {
        ensureTotalFeesIsMutable();
        totalFees_.remove(index);
        onChanged();
      } else {
        totalFeesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
     * note: the gas fee is calculated with the min gas fee param as a constant
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public cosmos.base.v1beta1.CoinOuterClass.Coin.Builder getTotalFeesBuilder(
        int index) {
      return getTotalFeesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
     * note: the gas fee is calculated with the min gas fee param as a constant
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public cosmos.base.v1beta1.CoinOuterClass.CoinOrBuilder getTotalFeesOrBuilder(
        int index) {
      if (totalFeesBuilder_ == null) {
        return totalFees_.get(index);  } else {
        return totalFeesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
     * note: the gas fee is calculated with the min gas fee param as a constant
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<? extends cosmos.base.v1beta1.CoinOuterClass.CoinOrBuilder> 
         getTotalFeesOrBuilderList() {
      if (totalFeesBuilder_ != null) {
        return totalFeesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(totalFees_);
      }
    }
    /**
     * <pre>
     * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
     * note: the gas fee is calculated with the min gas fee param as a constant
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public cosmos.base.v1beta1.CoinOuterClass.Coin.Builder addTotalFeesBuilder() {
      return getTotalFeesFieldBuilder().addBuilder(
          cosmos.base.v1beta1.CoinOuterClass.Coin.getDefaultInstance());
    }
    /**
     * <pre>
     * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
     * note: the gas fee is calculated with the min gas fee param as a constant
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public cosmos.base.v1beta1.CoinOuterClass.Coin.Builder addTotalFeesBuilder(
        int index) {
      return getTotalFeesFieldBuilder().addBuilder(
          index, cosmos.base.v1beta1.CoinOuterClass.Coin.getDefaultInstance());
    }
    /**
     * <pre>
     * total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
     * note: the gas fee is calculated with the min gas fee param as a constant
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin total_fees = 2 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<cosmos.base.v1beta1.CoinOuterClass.Coin.Builder> 
         getTotalFeesBuilderList() {
      return getTotalFeesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        cosmos.base.v1beta1.CoinOuterClass.Coin, cosmos.base.v1beta1.CoinOuterClass.Coin.Builder, cosmos.base.v1beta1.CoinOuterClass.CoinOrBuilder> 
        getTotalFeesFieldBuilder() {
      if (totalFeesBuilder_ == null) {
        totalFeesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            cosmos.base.v1beta1.CoinOuterClass.Coin, cosmos.base.v1beta1.CoinOuterClass.Coin.Builder, cosmos.base.v1beta1.CoinOuterClass.CoinOrBuilder>(
                totalFees_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        totalFees_ = null;
      }
      return totalFeesBuilder_;
    }

    private long estimatedGas_ ;
    /**
     * <pre>
     * estimated_gas is the amount of gas needed for the transaction
     * </pre>
     *
     * <code>uint64 estimated_gas = 3 [(.gogoproto.moretags) = "yaml:&#92;"estimated_gas&#92;""];</code>
     * @return The estimatedGas.
     */
    @java.lang.Override
    public long getEstimatedGas() {
      return estimatedGas_;
    }
    /**
     * <pre>
     * estimated_gas is the amount of gas needed for the transaction
     * </pre>
     *
     * <code>uint64 estimated_gas = 3 [(.gogoproto.moretags) = "yaml:&#92;"estimated_gas&#92;""];</code>
     * @param value The estimatedGas to set.
     * @return This builder for chaining.
     */
    public Builder setEstimatedGas(long value) {
      
      estimatedGas_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * estimated_gas is the amount of gas needed for the transaction
     * </pre>
     *
     * <code>uint64 estimated_gas = 3 [(.gogoproto.moretags) = "yaml:&#92;"estimated_gas&#92;""];</code>
     * @return This builder for chaining.
     */
    public Builder clearEstimatedGas() {
      
      estimatedGas_ = 0L;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:provenance.msgfees.v1.CalculateTxFeesResponse)
  }

  // @@protoc_insertion_point(class_scope:provenance.msgfees.v1.CalculateTxFeesResponse)
  private static final io.provenance.msgfees.v1.CalculateTxFeesResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.provenance.msgfees.v1.CalculateTxFeesResponse();
  }

  public static io.provenance.msgfees.v1.CalculateTxFeesResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CalculateTxFeesResponse>
      PARSER = new com.google.protobuf.AbstractParser<CalculateTxFeesResponse>() {
    @java.lang.Override
    public CalculateTxFeesResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new CalculateTxFeesResponse(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CalculateTxFeesResponse> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CalculateTxFeesResponse> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.provenance.msgfees.v1.CalculateTxFeesResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

