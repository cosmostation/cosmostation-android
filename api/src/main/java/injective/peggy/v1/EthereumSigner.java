// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/peggy/v1/ethereum_signer.proto

package injective.peggy.v1;

public final class EthereumSigner {
  private EthereumSigner() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * SignType defines messages that have been signed by an orchestrator
   * </pre>
   *
   * Protobuf enum {@code injective.peggy.v1.SignType}
   */
  public enum SignType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SIGN_TYPE_UNKNOWN = 0;</code>
     */
    SIGN_TYPE_UNKNOWN(0),
    /**
     * <code>SIGN_TYPE_ORCHESTRATOR_SIGNED_MULTI_SIG_UPDATE = 1;</code>
     */
    SIGN_TYPE_ORCHESTRATOR_SIGNED_MULTI_SIG_UPDATE(1),
    /**
     * <code>SIGN_TYPE_ORCHESTRATOR_SIGNED_WITHDRAW_BATCH = 2;</code>
     */
    SIGN_TYPE_ORCHESTRATOR_SIGNED_WITHDRAW_BATCH(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>SIGN_TYPE_UNKNOWN = 0;</code>
     */
    public static final int SIGN_TYPE_UNKNOWN_VALUE = 0;
    /**
     * <code>SIGN_TYPE_ORCHESTRATOR_SIGNED_MULTI_SIG_UPDATE = 1;</code>
     */
    public static final int SIGN_TYPE_ORCHESTRATOR_SIGNED_MULTI_SIG_UPDATE_VALUE = 1;
    /**
     * <code>SIGN_TYPE_ORCHESTRATOR_SIGNED_WITHDRAW_BATCH = 2;</code>
     */
    public static final int SIGN_TYPE_ORCHESTRATOR_SIGNED_WITHDRAW_BATCH_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SignType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static SignType forNumber(int value) {
      switch (value) {
        case 0: return SIGN_TYPE_UNKNOWN;
        case 1: return SIGN_TYPE_ORCHESTRATOR_SIGNED_MULTI_SIG_UPDATE;
        case 2: return SIGN_TYPE_ORCHESTRATOR_SIGNED_WITHDRAW_BATCH;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SignType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SignType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SignType>() {
            public SignType findValueByNumber(int number) {
              return SignType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return injective.peggy.v1.EthereumSigner.getDescriptor().getEnumTypes().get(0);
    }

    private static final SignType[] VALUES = values();

    public static SignType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SignType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:injective.peggy.v1.SignType)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n(injective/peggy/v1/ethereum_signer.pro" +
      "to\022\022injective.peggy.v1\032\024gogoproto/gogo.p" +
      "roto*\221\001\n\010SignType\022\025\n\021SIGN_TYPE_UNKNOWN\020\000" +
      "\0222\n.SIGN_TYPE_ORCHESTRATOR_SIGNED_MULTI_" +
      "SIG_UPDATE\020\001\0220\n,SIGN_TYPE_ORCHESTRATOR_S" +
      "IGNED_WITHDRAW_BATCH\020\002\032\010\210\243\036\000\250\244\036\000BMZKgith" +
      "ub.com/InjectiveLabs/injective-core/inje" +
      "ctive-chain/modules/peggy/typesb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf2.GoGoProtos.getDescriptor(),
        });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.google.protobuf2.GoGoProtos.goprotoEnumPrefix);
    registry.add(com.google.protobuf2.GoGoProtos.goprotoEnumStringer);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.google.protobuf2.GoGoProtos.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
