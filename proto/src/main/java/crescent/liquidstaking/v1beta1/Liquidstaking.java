// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crescent/liquidstaking/v1beta1/liquidstaking.proto

package crescent.liquidstaking.v1beta1;

public final class Liquidstaking {
  private Liquidstaking() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * ValidatorStatus enumerates the status of a liquid validator.
   * </pre>
   *
   * Protobuf enum {@code crescent.liquidstaking.v1beta1.ValidatorStatus}
   */
  public enum ValidatorStatus
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * VALIDATOR_STATUS_UNSPECIFIED defines the unspecified invalid status.
     * </pre>
     *
     * <code>VALIDATOR_STATUS_UNSPECIFIED = 0 [(.gogoproto.enumvalue_customname) = "ValidatorStatusUnspecified"];</code>
     */
    VALIDATOR_STATUS_UNSPECIFIED(0),
    /**
     * <pre>
     * VALIDATOR_STATUS_ACTIVE defines the active, valid status
     * </pre>
     *
     * <code>VALIDATOR_STATUS_ACTIVE = 1 [(.gogoproto.enumvalue_customname) = "ValidatorStatusActive"];</code>
     */
    VALIDATOR_STATUS_ACTIVE(1),
    /**
     * <pre>
     * VALIDATOR_STATUS_INACTIVE defines the inactive, invalid status
     * </pre>
     *
     * <code>VALIDATOR_STATUS_INACTIVE = 2 [(.gogoproto.enumvalue_customname) = "ValidatorStatusInactive"];</code>
     */
    VALIDATOR_STATUS_INACTIVE(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * VALIDATOR_STATUS_UNSPECIFIED defines the unspecified invalid status.
     * </pre>
     *
     * <code>VALIDATOR_STATUS_UNSPECIFIED = 0 [(.gogoproto.enumvalue_customname) = "ValidatorStatusUnspecified"];</code>
     */
    public static final int VALIDATOR_STATUS_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * VALIDATOR_STATUS_ACTIVE defines the active, valid status
     * </pre>
     *
     * <code>VALIDATOR_STATUS_ACTIVE = 1 [(.gogoproto.enumvalue_customname) = "ValidatorStatusActive"];</code>
     */
    public static final int VALIDATOR_STATUS_ACTIVE_VALUE = 1;
    /**
     * <pre>
     * VALIDATOR_STATUS_INACTIVE defines the inactive, invalid status
     * </pre>
     *
     * <code>VALIDATOR_STATUS_INACTIVE = 2 [(.gogoproto.enumvalue_customname) = "ValidatorStatusInactive"];</code>
     */
    public static final int VALIDATOR_STATUS_INACTIVE_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ValidatorStatus valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ValidatorStatus forNumber(int value) {
      switch (value) {
        case 0: return VALIDATOR_STATUS_UNSPECIFIED;
        case 1: return VALIDATOR_STATUS_ACTIVE;
        case 2: return VALIDATOR_STATUS_INACTIVE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ValidatorStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ValidatorStatus> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ValidatorStatus>() {
            public ValidatorStatus findValueByNumber(int number) {
              return ValidatorStatus.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return crescent.liquidstaking.v1beta1.Liquidstaking.getDescriptor().getEnumTypes().get(0);
    }

    private static final ValidatorStatus[] VALUES = values();

    public static ValidatorStatus valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ValidatorStatus(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:crescent.liquidstaking.v1beta1.ValidatorStatus)
  }

  public interface ParamsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:crescent.liquidstaking.v1beta1.Params)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * LiquidBondDenom specifies the denomination of the token receiving after LiquidStaking, The value is calculated
     * through NetAmount.
     * </pre>
     *
     * <code>string liquid_bond_denom = 1 [(.gogoproto.moretags) = "yaml:&#92;"liquid_bond_denom&#92;""];</code>
     * @return The liquidBondDenom.
     */
    java.lang.String getLiquidBondDenom();
    /**
     * <pre>
     * LiquidBondDenom specifies the denomination of the token receiving after LiquidStaking, The value is calculated
     * through NetAmount.
     * </pre>
     *
     * <code>string liquid_bond_denom = 1 [(.gogoproto.moretags) = "yaml:&#92;"liquid_bond_denom&#92;""];</code>
     * @return The bytes for liquidBondDenom.
     */
    com.google.protobuf.ByteString
        getLiquidBondDenomBytes();

    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    java.util.List<crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator> 
        getWhitelistedValidatorsList();
    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator getWhitelistedValidators(int index);
    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    int getWhitelistedValidatorsCount();
    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    java.util.List<? extends crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidatorOrBuilder> 
        getWhitelistedValidatorsOrBuilderList();
    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidatorOrBuilder getWhitelistedValidatorsOrBuilder(
        int index);

    /**
     * <pre>
     * UnstakeFeeRate specifies the fee rate when liquid unstake is requested, unbonded by subtracting it from
     * unbondingAmount
     * </pre>
     *
     * <code>string unstake_fee_rate = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"unstake_fee_rate&#92;""];</code>
     * @return The unstakeFeeRate.
     */
    java.lang.String getUnstakeFeeRate();
    /**
     * <pre>
     * UnstakeFeeRate specifies the fee rate when liquid unstake is requested, unbonded by subtracting it from
     * unbondingAmount
     * </pre>
     *
     * <code>string unstake_fee_rate = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"unstake_fee_rate&#92;""];</code>
     * @return The bytes for unstakeFeeRate.
     */
    com.google.protobuf.ByteString
        getUnstakeFeeRateBytes();

    /**
     * <pre>
     * MinLiquidStakingAmount specifies the minimum number of coins to be staked to the active liquid validators on liquid
     * staking to minimize decimal loss and consider gas efficiency.
     * </pre>
     *
     * <code>string min_liquid_staking_amount = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"min_liquid_staking_amount&#92;""];</code>
     * @return The minLiquidStakingAmount.
     */
    java.lang.String getMinLiquidStakingAmount();
    /**
     * <pre>
     * MinLiquidStakingAmount specifies the minimum number of coins to be staked to the active liquid validators on liquid
     * staking to minimize decimal loss and consider gas efficiency.
     * </pre>
     *
     * <code>string min_liquid_staking_amount = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"min_liquid_staking_amount&#92;""];</code>
     * @return The bytes for minLiquidStakingAmount.
     */
    com.google.protobuf.ByteString
        getMinLiquidStakingAmountBytes();
  }
  /**
   * <pre>
   * Params defines the set of params for the liquidstaking module.
   * </pre>
   *
   * Protobuf type {@code crescent.liquidstaking.v1beta1.Params}
   */
  public static final class Params extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:crescent.liquidstaking.v1beta1.Params)
      ParamsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Params.newBuilder() to construct.
    private Params(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Params() {
      liquidBondDenom_ = "";
      whitelistedValidators_ = java.util.Collections.emptyList();
      unstakeFeeRate_ = "";
      minLiquidStakingAmount_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Params();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Params(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              liquidBondDenom_ = s;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                whitelistedValidators_ = new java.util.ArrayList<crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator>();
                mutable_bitField0_ |= 0x00000001;
              }
              whitelistedValidators_.add(
                  input.readMessage(crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator.parser(), extensionRegistry));
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              unstakeFeeRate_ = s;
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              minLiquidStakingAmount_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          whitelistedValidators_ = java.util.Collections.unmodifiableList(whitelistedValidators_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_Params_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_Params_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              crescent.liquidstaking.v1beta1.Liquidstaking.Params.class, crescent.liquidstaking.v1beta1.Liquidstaking.Params.Builder.class);
    }

    public static final int LIQUID_BOND_DENOM_FIELD_NUMBER = 1;
    private volatile java.lang.Object liquidBondDenom_;
    /**
     * <pre>
     * LiquidBondDenom specifies the denomination of the token receiving after LiquidStaking, The value is calculated
     * through NetAmount.
     * </pre>
     *
     * <code>string liquid_bond_denom = 1 [(.gogoproto.moretags) = "yaml:&#92;"liquid_bond_denom&#92;""];</code>
     * @return The liquidBondDenom.
     */
    @java.lang.Override
    public java.lang.String getLiquidBondDenom() {
      java.lang.Object ref = liquidBondDenom_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        liquidBondDenom_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * LiquidBondDenom specifies the denomination of the token receiving after LiquidStaking, The value is calculated
     * through NetAmount.
     * </pre>
     *
     * <code>string liquid_bond_denom = 1 [(.gogoproto.moretags) = "yaml:&#92;"liquid_bond_denom&#92;""];</code>
     * @return The bytes for liquidBondDenom.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLiquidBondDenomBytes() {
      java.lang.Object ref = liquidBondDenom_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        liquidBondDenom_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int WHITELISTED_VALIDATORS_FIELD_NUMBER = 2;
    private java.util.List<crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator> whitelistedValidators_;
    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    @java.lang.Override
    public java.util.List<crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator> getWhitelistedValidatorsList() {
      return whitelistedValidators_;
    }
    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    @java.lang.Override
    public java.util.List<? extends crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidatorOrBuilder> 
        getWhitelistedValidatorsOrBuilderList() {
      return whitelistedValidators_;
    }
    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    @java.lang.Override
    public int getWhitelistedValidatorsCount() {
      return whitelistedValidators_.size();
    }
    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    @java.lang.Override
    public crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator getWhitelistedValidators(int index) {
      return whitelistedValidators_.get(index);
    }
    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    @java.lang.Override
    public crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidatorOrBuilder getWhitelistedValidatorsOrBuilder(
        int index) {
      return whitelistedValidators_.get(index);
    }

    public static final int UNSTAKE_FEE_RATE_FIELD_NUMBER = 3;
    private volatile java.lang.Object unstakeFeeRate_;
    /**
     * <pre>
     * UnstakeFeeRate specifies the fee rate when liquid unstake is requested, unbonded by subtracting it from
     * unbondingAmount
     * </pre>
     *
     * <code>string unstake_fee_rate = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"unstake_fee_rate&#92;""];</code>
     * @return The unstakeFeeRate.
     */
    @java.lang.Override
    public java.lang.String getUnstakeFeeRate() {
      java.lang.Object ref = unstakeFeeRate_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        unstakeFeeRate_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * UnstakeFeeRate specifies the fee rate when liquid unstake is requested, unbonded by subtracting it from
     * unbondingAmount
     * </pre>
     *
     * <code>string unstake_fee_rate = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"unstake_fee_rate&#92;""];</code>
     * @return The bytes for unstakeFeeRate.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUnstakeFeeRateBytes() {
      java.lang.Object ref = unstakeFeeRate_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        unstakeFeeRate_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MIN_LIQUID_STAKING_AMOUNT_FIELD_NUMBER = 5;
    private volatile java.lang.Object minLiquidStakingAmount_;
    /**
     * <pre>
     * MinLiquidStakingAmount specifies the minimum number of coins to be staked to the active liquid validators on liquid
     * staking to minimize decimal loss and consider gas efficiency.
     * </pre>
     *
     * <code>string min_liquid_staking_amount = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"min_liquid_staking_amount&#92;""];</code>
     * @return The minLiquidStakingAmount.
     */
    @java.lang.Override
    public java.lang.String getMinLiquidStakingAmount() {
      java.lang.Object ref = minLiquidStakingAmount_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        minLiquidStakingAmount_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * MinLiquidStakingAmount specifies the minimum number of coins to be staked to the active liquid validators on liquid
     * staking to minimize decimal loss and consider gas efficiency.
     * </pre>
     *
     * <code>string min_liquid_staking_amount = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"min_liquid_staking_amount&#92;""];</code>
     * @return The bytes for minLiquidStakingAmount.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMinLiquidStakingAmountBytes() {
      java.lang.Object ref = minLiquidStakingAmount_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        minLiquidStakingAmount_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getLiquidBondDenomBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, liquidBondDenom_);
      }
      for (int i = 0; i < whitelistedValidators_.size(); i++) {
        output.writeMessage(2, whitelistedValidators_.get(i));
      }
      if (!getUnstakeFeeRateBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, unstakeFeeRate_);
      }
      if (!getMinLiquidStakingAmountBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, minLiquidStakingAmount_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getLiquidBondDenomBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, liquidBondDenom_);
      }
      for (int i = 0; i < whitelistedValidators_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, whitelistedValidators_.get(i));
      }
      if (!getUnstakeFeeRateBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, unstakeFeeRate_);
      }
      if (!getMinLiquidStakingAmountBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, minLiquidStakingAmount_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof crescent.liquidstaking.v1beta1.Liquidstaking.Params)) {
        return super.equals(obj);
      }
      crescent.liquidstaking.v1beta1.Liquidstaking.Params other = (crescent.liquidstaking.v1beta1.Liquidstaking.Params) obj;

      if (!getLiquidBondDenom()
          .equals(other.getLiquidBondDenom())) return false;
      if (!getWhitelistedValidatorsList()
          .equals(other.getWhitelistedValidatorsList())) return false;
      if (!getUnstakeFeeRate()
          .equals(other.getUnstakeFeeRate())) return false;
      if (!getMinLiquidStakingAmount()
          .equals(other.getMinLiquidStakingAmount())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + LIQUID_BOND_DENOM_FIELD_NUMBER;
      hash = (53 * hash) + getLiquidBondDenom().hashCode();
      if (getWhitelistedValidatorsCount() > 0) {
        hash = (37 * hash) + WHITELISTED_VALIDATORS_FIELD_NUMBER;
        hash = (53 * hash) + getWhitelistedValidatorsList().hashCode();
      }
      hash = (37 * hash) + UNSTAKE_FEE_RATE_FIELD_NUMBER;
      hash = (53 * hash) + getUnstakeFeeRate().hashCode();
      hash = (37 * hash) + MIN_LIQUID_STAKING_AMOUNT_FIELD_NUMBER;
      hash = (53 * hash) + getMinLiquidStakingAmount().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static crescent.liquidstaking.v1beta1.Liquidstaking.Params parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.Params parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.Params parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.Params parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.Params parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.Params parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.Params parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.Params parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.Params parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.Params parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.Params parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.Params parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(crescent.liquidstaking.v1beta1.Liquidstaking.Params prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Params defines the set of params for the liquidstaking module.
     * </pre>
     *
     * Protobuf type {@code crescent.liquidstaking.v1beta1.Params}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:crescent.liquidstaking.v1beta1.Params)
        crescent.liquidstaking.v1beta1.Liquidstaking.ParamsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_Params_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_Params_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                crescent.liquidstaking.v1beta1.Liquidstaking.Params.class, crescent.liquidstaking.v1beta1.Liquidstaking.Params.Builder.class);
      }

      // Construct using crescent.liquidstaking.v1beta1.Liquidstaking.Params.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getWhitelistedValidatorsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        liquidBondDenom_ = "";

        if (whitelistedValidatorsBuilder_ == null) {
          whitelistedValidators_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          whitelistedValidatorsBuilder_.clear();
        }
        unstakeFeeRate_ = "";

        minLiquidStakingAmount_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_Params_descriptor;
      }

      @java.lang.Override
      public crescent.liquidstaking.v1beta1.Liquidstaking.Params getDefaultInstanceForType() {
        return crescent.liquidstaking.v1beta1.Liquidstaking.Params.getDefaultInstance();
      }

      @java.lang.Override
      public crescent.liquidstaking.v1beta1.Liquidstaking.Params build() {
        crescent.liquidstaking.v1beta1.Liquidstaking.Params result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public crescent.liquidstaking.v1beta1.Liquidstaking.Params buildPartial() {
        crescent.liquidstaking.v1beta1.Liquidstaking.Params result = new crescent.liquidstaking.v1beta1.Liquidstaking.Params(this);
        int from_bitField0_ = bitField0_;
        result.liquidBondDenom_ = liquidBondDenom_;
        if (whitelistedValidatorsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            whitelistedValidators_ = java.util.Collections.unmodifiableList(whitelistedValidators_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.whitelistedValidators_ = whitelistedValidators_;
        } else {
          result.whitelistedValidators_ = whitelistedValidatorsBuilder_.build();
        }
        result.unstakeFeeRate_ = unstakeFeeRate_;
        result.minLiquidStakingAmount_ = minLiquidStakingAmount_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof crescent.liquidstaking.v1beta1.Liquidstaking.Params) {
          return mergeFrom((crescent.liquidstaking.v1beta1.Liquidstaking.Params)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(crescent.liquidstaking.v1beta1.Liquidstaking.Params other) {
        if (other == crescent.liquidstaking.v1beta1.Liquidstaking.Params.getDefaultInstance()) return this;
        if (!other.getLiquidBondDenom().isEmpty()) {
          liquidBondDenom_ = other.liquidBondDenom_;
          onChanged();
        }
        if (whitelistedValidatorsBuilder_ == null) {
          if (!other.whitelistedValidators_.isEmpty()) {
            if (whitelistedValidators_.isEmpty()) {
              whitelistedValidators_ = other.whitelistedValidators_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureWhitelistedValidatorsIsMutable();
              whitelistedValidators_.addAll(other.whitelistedValidators_);
            }
            onChanged();
          }
        } else {
          if (!other.whitelistedValidators_.isEmpty()) {
            if (whitelistedValidatorsBuilder_.isEmpty()) {
              whitelistedValidatorsBuilder_.dispose();
              whitelistedValidatorsBuilder_ = null;
              whitelistedValidators_ = other.whitelistedValidators_;
              bitField0_ = (bitField0_ & ~0x00000001);
              whitelistedValidatorsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getWhitelistedValidatorsFieldBuilder() : null;
            } else {
              whitelistedValidatorsBuilder_.addAllMessages(other.whitelistedValidators_);
            }
          }
        }
        if (!other.getUnstakeFeeRate().isEmpty()) {
          unstakeFeeRate_ = other.unstakeFeeRate_;
          onChanged();
        }
        if (!other.getMinLiquidStakingAmount().isEmpty()) {
          minLiquidStakingAmount_ = other.minLiquidStakingAmount_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        crescent.liquidstaking.v1beta1.Liquidstaking.Params parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (crescent.liquidstaking.v1beta1.Liquidstaking.Params) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object liquidBondDenom_ = "";
      /**
       * <pre>
       * LiquidBondDenom specifies the denomination of the token receiving after LiquidStaking, The value is calculated
       * through NetAmount.
       * </pre>
       *
       * <code>string liquid_bond_denom = 1 [(.gogoproto.moretags) = "yaml:&#92;"liquid_bond_denom&#92;""];</code>
       * @return The liquidBondDenom.
       */
      public java.lang.String getLiquidBondDenom() {
        java.lang.Object ref = liquidBondDenom_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          liquidBondDenom_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * LiquidBondDenom specifies the denomination of the token receiving after LiquidStaking, The value is calculated
       * through NetAmount.
       * </pre>
       *
       * <code>string liquid_bond_denom = 1 [(.gogoproto.moretags) = "yaml:&#92;"liquid_bond_denom&#92;""];</code>
       * @return The bytes for liquidBondDenom.
       */
      public com.google.protobuf.ByteString
          getLiquidBondDenomBytes() {
        java.lang.Object ref = liquidBondDenom_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          liquidBondDenom_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * LiquidBondDenom specifies the denomination of the token receiving after LiquidStaking, The value is calculated
       * through NetAmount.
       * </pre>
       *
       * <code>string liquid_bond_denom = 1 [(.gogoproto.moretags) = "yaml:&#92;"liquid_bond_denom&#92;""];</code>
       * @param value The liquidBondDenom to set.
       * @return This builder for chaining.
       */
      public Builder setLiquidBondDenom(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        liquidBondDenom_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * LiquidBondDenom specifies the denomination of the token receiving after LiquidStaking, The value is calculated
       * through NetAmount.
       * </pre>
       *
       * <code>string liquid_bond_denom = 1 [(.gogoproto.moretags) = "yaml:&#92;"liquid_bond_denom&#92;""];</code>
       * @return This builder for chaining.
       */
      public Builder clearLiquidBondDenom() {
        
        liquidBondDenom_ = getDefaultInstance().getLiquidBondDenom();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * LiquidBondDenom specifies the denomination of the token receiving after LiquidStaking, The value is calculated
       * through NetAmount.
       * </pre>
       *
       * <code>string liquid_bond_denom = 1 [(.gogoproto.moretags) = "yaml:&#92;"liquid_bond_denom&#92;""];</code>
       * @param value The bytes for liquidBondDenom to set.
       * @return This builder for chaining.
       */
      public Builder setLiquidBondDenomBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        liquidBondDenom_ = value;
        onChanged();
        return this;
      }

      private java.util.List<crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator> whitelistedValidators_ =
        java.util.Collections.emptyList();
      private void ensureWhitelistedValidatorsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          whitelistedValidators_ = new java.util.ArrayList<crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator>(whitelistedValidators_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator, crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator.Builder, crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidatorOrBuilder> whitelistedValidatorsBuilder_;

      /**
       * <pre>
       * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
       * </pre>
       *
       * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
       */
      public java.util.List<crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator> getWhitelistedValidatorsList() {
        if (whitelistedValidatorsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(whitelistedValidators_);
        } else {
          return whitelistedValidatorsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
       * </pre>
       *
       * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
       */
      public int getWhitelistedValidatorsCount() {
        if (whitelistedValidatorsBuilder_ == null) {
          return whitelistedValidators_.size();
        } else {
          return whitelistedValidatorsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
       * </pre>
       *
       * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
       */
      public crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator getWhitelistedValidators(int index) {
        if (whitelistedValidatorsBuilder_ == null) {
          return whitelistedValidators_.get(index);
        } else {
          return whitelistedValidatorsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
       * </pre>
       *
       * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
       */
      public Builder setWhitelistedValidators(
          int index, crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator value) {
        if (whitelistedValidatorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWhitelistedValidatorsIsMutable();
          whitelistedValidators_.set(index, value);
          onChanged();
        } else {
          whitelistedValidatorsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
       * </pre>
       *
       * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
       */
      public Builder setWhitelistedValidators(
          int index, crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator.Builder builderForValue) {
        if (whitelistedValidatorsBuilder_ == null) {
          ensureWhitelistedValidatorsIsMutable();
          whitelistedValidators_.set(index, builderForValue.build());
          onChanged();
        } else {
          whitelistedValidatorsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
       * </pre>
       *
       * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
       */
      public Builder addWhitelistedValidators(crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator value) {
        if (whitelistedValidatorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWhitelistedValidatorsIsMutable();
          whitelistedValidators_.add(value);
          onChanged();
        } else {
          whitelistedValidatorsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
       * </pre>
       *
       * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
       */
      public Builder addWhitelistedValidators(
          int index, crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator value) {
        if (whitelistedValidatorsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWhitelistedValidatorsIsMutable();
          whitelistedValidators_.add(index, value);
          onChanged();
        } else {
          whitelistedValidatorsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
       * </pre>
       *
       * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
       */
      public Builder addWhitelistedValidators(
          crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator.Builder builderForValue) {
        if (whitelistedValidatorsBuilder_ == null) {
          ensureWhitelistedValidatorsIsMutable();
          whitelistedValidators_.add(builderForValue.build());
          onChanged();
        } else {
          whitelistedValidatorsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
       * </pre>
       *
       * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
       */
      public Builder addWhitelistedValidators(
          int index, crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator.Builder builderForValue) {
        if (whitelistedValidatorsBuilder_ == null) {
          ensureWhitelistedValidatorsIsMutable();
          whitelistedValidators_.add(index, builderForValue.build());
          onChanged();
        } else {
          whitelistedValidatorsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
       * </pre>
       *
       * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
       */
      public Builder addAllWhitelistedValidators(
          java.lang.Iterable<? extends crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator> values) {
        if (whitelistedValidatorsBuilder_ == null) {
          ensureWhitelistedValidatorsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, whitelistedValidators_);
          onChanged();
        } else {
          whitelistedValidatorsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
       * </pre>
       *
       * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
       */
      public Builder clearWhitelistedValidators() {
        if (whitelistedValidatorsBuilder_ == null) {
          whitelistedValidators_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          whitelistedValidatorsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
       * </pre>
       *
       * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
       */
      public Builder removeWhitelistedValidators(int index) {
        if (whitelistedValidatorsBuilder_ == null) {
          ensureWhitelistedValidatorsIsMutable();
          whitelistedValidators_.remove(index);
          onChanged();
        } else {
          whitelistedValidatorsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
       * </pre>
       *
       * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
       */
      public crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator.Builder getWhitelistedValidatorsBuilder(
          int index) {
        return getWhitelistedValidatorsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
       * </pre>
       *
       * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
       */
      public crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidatorOrBuilder getWhitelistedValidatorsOrBuilder(
          int index) {
        if (whitelistedValidatorsBuilder_ == null) {
          return whitelistedValidators_.get(index);  } else {
          return whitelistedValidatorsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
       * </pre>
       *
       * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
       */
      public java.util.List<? extends crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidatorOrBuilder> 
           getWhitelistedValidatorsOrBuilderList() {
        if (whitelistedValidatorsBuilder_ != null) {
          return whitelistedValidatorsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(whitelistedValidators_);
        }
      }
      /**
       * <pre>
       * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
       * </pre>
       *
       * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
       */
      public crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator.Builder addWhitelistedValidatorsBuilder() {
        return getWhitelistedValidatorsFieldBuilder().addBuilder(
            crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator.getDefaultInstance());
      }
      /**
       * <pre>
       * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
       * </pre>
       *
       * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
       */
      public crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator.Builder addWhitelistedValidatorsBuilder(
          int index) {
        return getWhitelistedValidatorsFieldBuilder().addBuilder(
            index, crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator.getDefaultInstance());
      }
      /**
       * <pre>
       * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
       * </pre>
       *
       * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [(.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
       */
      public java.util.List<crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator.Builder> 
           getWhitelistedValidatorsBuilderList() {
        return getWhitelistedValidatorsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator, crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator.Builder, crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidatorOrBuilder> 
          getWhitelistedValidatorsFieldBuilder() {
        if (whitelistedValidatorsBuilder_ == null) {
          whitelistedValidatorsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator, crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator.Builder, crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidatorOrBuilder>(
                  whitelistedValidators_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          whitelistedValidators_ = null;
        }
        return whitelistedValidatorsBuilder_;
      }

      private java.lang.Object unstakeFeeRate_ = "";
      /**
       * <pre>
       * UnstakeFeeRate specifies the fee rate when liquid unstake is requested, unbonded by subtracting it from
       * unbondingAmount
       * </pre>
       *
       * <code>string unstake_fee_rate = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"unstake_fee_rate&#92;""];</code>
       * @return The unstakeFeeRate.
       */
      public java.lang.String getUnstakeFeeRate() {
        java.lang.Object ref = unstakeFeeRate_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          unstakeFeeRate_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * UnstakeFeeRate specifies the fee rate when liquid unstake is requested, unbonded by subtracting it from
       * unbondingAmount
       * </pre>
       *
       * <code>string unstake_fee_rate = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"unstake_fee_rate&#92;""];</code>
       * @return The bytes for unstakeFeeRate.
       */
      public com.google.protobuf.ByteString
          getUnstakeFeeRateBytes() {
        java.lang.Object ref = unstakeFeeRate_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          unstakeFeeRate_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * UnstakeFeeRate specifies the fee rate when liquid unstake is requested, unbonded by subtracting it from
       * unbondingAmount
       * </pre>
       *
       * <code>string unstake_fee_rate = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"unstake_fee_rate&#92;""];</code>
       * @param value The unstakeFeeRate to set.
       * @return This builder for chaining.
       */
      public Builder setUnstakeFeeRate(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        unstakeFeeRate_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * UnstakeFeeRate specifies the fee rate when liquid unstake is requested, unbonded by subtracting it from
       * unbondingAmount
       * </pre>
       *
       * <code>string unstake_fee_rate = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"unstake_fee_rate&#92;""];</code>
       * @return This builder for chaining.
       */
      public Builder clearUnstakeFeeRate() {
        
        unstakeFeeRate_ = getDefaultInstance().getUnstakeFeeRate();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * UnstakeFeeRate specifies the fee rate when liquid unstake is requested, unbonded by subtracting it from
       * unbondingAmount
       * </pre>
       *
       * <code>string unstake_fee_rate = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"unstake_fee_rate&#92;""];</code>
       * @param value The bytes for unstakeFeeRate to set.
       * @return This builder for chaining.
       */
      public Builder setUnstakeFeeRateBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        unstakeFeeRate_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object minLiquidStakingAmount_ = "";
      /**
       * <pre>
       * MinLiquidStakingAmount specifies the minimum number of coins to be staked to the active liquid validators on liquid
       * staking to minimize decimal loss and consider gas efficiency.
       * </pre>
       *
       * <code>string min_liquid_staking_amount = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"min_liquid_staking_amount&#92;""];</code>
       * @return The minLiquidStakingAmount.
       */
      public java.lang.String getMinLiquidStakingAmount() {
        java.lang.Object ref = minLiquidStakingAmount_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          minLiquidStakingAmount_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * MinLiquidStakingAmount specifies the minimum number of coins to be staked to the active liquid validators on liquid
       * staking to minimize decimal loss and consider gas efficiency.
       * </pre>
       *
       * <code>string min_liquid_staking_amount = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"min_liquid_staking_amount&#92;""];</code>
       * @return The bytes for minLiquidStakingAmount.
       */
      public com.google.protobuf.ByteString
          getMinLiquidStakingAmountBytes() {
        java.lang.Object ref = minLiquidStakingAmount_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          minLiquidStakingAmount_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * MinLiquidStakingAmount specifies the minimum number of coins to be staked to the active liquid validators on liquid
       * staking to minimize decimal loss and consider gas efficiency.
       * </pre>
       *
       * <code>string min_liquid_staking_amount = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"min_liquid_staking_amount&#92;""];</code>
       * @param value The minLiquidStakingAmount to set.
       * @return This builder for chaining.
       */
      public Builder setMinLiquidStakingAmount(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        minLiquidStakingAmount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * MinLiquidStakingAmount specifies the minimum number of coins to be staked to the active liquid validators on liquid
       * staking to minimize decimal loss and consider gas efficiency.
       * </pre>
       *
       * <code>string min_liquid_staking_amount = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"min_liquid_staking_amount&#92;""];</code>
       * @return This builder for chaining.
       */
      public Builder clearMinLiquidStakingAmount() {
        
        minLiquidStakingAmount_ = getDefaultInstance().getMinLiquidStakingAmount();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * MinLiquidStakingAmount specifies the minimum number of coins to be staked to the active liquid validators on liquid
       * staking to minimize decimal loss and consider gas efficiency.
       * </pre>
       *
       * <code>string min_liquid_staking_amount = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"min_liquid_staking_amount&#92;""];</code>
       * @param value The bytes for minLiquidStakingAmount to set.
       * @return This builder for chaining.
       */
      public Builder setMinLiquidStakingAmountBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        minLiquidStakingAmount_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:crescent.liquidstaking.v1beta1.Params)
    }

    // @@protoc_insertion_point(class_scope:crescent.liquidstaking.v1beta1.Params)
    private static final crescent.liquidstaking.v1beta1.Liquidstaking.Params DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new crescent.liquidstaking.v1beta1.Liquidstaking.Params();
    }

    public static crescent.liquidstaking.v1beta1.Liquidstaking.Params getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Params>
        PARSER = new com.google.protobuf.AbstractParser<Params>() {
      @java.lang.Override
      public Params parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Params(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Params> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Params> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public crescent.liquidstaking.v1beta1.Liquidstaking.Params getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface WhitelistedValidatorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:crescent.liquidstaking.v1beta1.WhitelistedValidator)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * validator_address defines the bech32-encoded address that whitelisted validator
     * </pre>
     *
     * <code>string validator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"validator_address&#92;""];</code>
     * @return The validatorAddress.
     */
    java.lang.String getValidatorAddress();
    /**
     * <pre>
     * validator_address defines the bech32-encoded address that whitelisted validator
     * </pre>
     *
     * <code>string validator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"validator_address&#92;""];</code>
     * @return The bytes for validatorAddress.
     */
    com.google.protobuf.ByteString
        getValidatorAddressBytes();

    /**
     * <pre>
     * target_weight specifies the target weight for liquid staking, unstaking amount, which is a value for calculating
     * the real weight to be derived according to the active status
     * </pre>
     *
     * <code>string target_weight = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"target_weight&#92;""];</code>
     * @return The targetWeight.
     */
    java.lang.String getTargetWeight();
    /**
     * <pre>
     * target_weight specifies the target weight for liquid staking, unstaking amount, which is a value for calculating
     * the real weight to be derived according to the active status
     * </pre>
     *
     * <code>string target_weight = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"target_weight&#92;""];</code>
     * @return The bytes for targetWeight.
     */
    com.google.protobuf.ByteString
        getTargetWeightBytes();
  }
  /**
   * <pre>
   * WhitelistedValidator consists of the validator operator address and the target weight, which is a value for
   * calculating the real weight to be derived according to the active status. In the case of inactive, it is calculated
   * as zero.
   * </pre>
   *
   * Protobuf type {@code crescent.liquidstaking.v1beta1.WhitelistedValidator}
   */
  public static final class WhitelistedValidator extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:crescent.liquidstaking.v1beta1.WhitelistedValidator)
      WhitelistedValidatorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use WhitelistedValidator.newBuilder() to construct.
    private WhitelistedValidator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private WhitelistedValidator() {
      validatorAddress_ = "";
      targetWeight_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new WhitelistedValidator();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private WhitelistedValidator(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              validatorAddress_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              targetWeight_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_WhitelistedValidator_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_WhitelistedValidator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator.class, crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator.Builder.class);
    }

    public static final int VALIDATOR_ADDRESS_FIELD_NUMBER = 1;
    private volatile java.lang.Object validatorAddress_;
    /**
     * <pre>
     * validator_address defines the bech32-encoded address that whitelisted validator
     * </pre>
     *
     * <code>string validator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"validator_address&#92;""];</code>
     * @return The validatorAddress.
     */
    @java.lang.Override
    public java.lang.String getValidatorAddress() {
      java.lang.Object ref = validatorAddress_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        validatorAddress_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * validator_address defines the bech32-encoded address that whitelisted validator
     * </pre>
     *
     * <code>string validator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"validator_address&#92;""];</code>
     * @return The bytes for validatorAddress.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getValidatorAddressBytes() {
      java.lang.Object ref = validatorAddress_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        validatorAddress_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TARGET_WEIGHT_FIELD_NUMBER = 2;
    private volatile java.lang.Object targetWeight_;
    /**
     * <pre>
     * target_weight specifies the target weight for liquid staking, unstaking amount, which is a value for calculating
     * the real weight to be derived according to the active status
     * </pre>
     *
     * <code>string target_weight = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"target_weight&#92;""];</code>
     * @return The targetWeight.
     */
    @java.lang.Override
    public java.lang.String getTargetWeight() {
      java.lang.Object ref = targetWeight_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        targetWeight_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * target_weight specifies the target weight for liquid staking, unstaking amount, which is a value for calculating
     * the real weight to be derived according to the active status
     * </pre>
     *
     * <code>string target_weight = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"target_weight&#92;""];</code>
     * @return The bytes for targetWeight.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTargetWeightBytes() {
      java.lang.Object ref = targetWeight_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        targetWeight_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getValidatorAddressBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, validatorAddress_);
      }
      if (!getTargetWeightBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, targetWeight_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getValidatorAddressBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, validatorAddress_);
      }
      if (!getTargetWeightBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, targetWeight_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator)) {
        return super.equals(obj);
      }
      crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator other = (crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator) obj;

      if (!getValidatorAddress()
          .equals(other.getValidatorAddress())) return false;
      if (!getTargetWeight()
          .equals(other.getTargetWeight())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + VALIDATOR_ADDRESS_FIELD_NUMBER;
      hash = (53 * hash) + getValidatorAddress().hashCode();
      hash = (37 * hash) + TARGET_WEIGHT_FIELD_NUMBER;
      hash = (53 * hash) + getTargetWeight().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * WhitelistedValidator consists of the validator operator address and the target weight, which is a value for
     * calculating the real weight to be derived according to the active status. In the case of inactive, it is calculated
     * as zero.
     * </pre>
     *
     * Protobuf type {@code crescent.liquidstaking.v1beta1.WhitelistedValidator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:crescent.liquidstaking.v1beta1.WhitelistedValidator)
        crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidatorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_WhitelistedValidator_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_WhitelistedValidator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator.class, crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator.Builder.class);
      }

      // Construct using crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        validatorAddress_ = "";

        targetWeight_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_WhitelistedValidator_descriptor;
      }

      @java.lang.Override
      public crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator getDefaultInstanceForType() {
        return crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator.getDefaultInstance();
      }

      @java.lang.Override
      public crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator build() {
        crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator buildPartial() {
        crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator result = new crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator(this);
        result.validatorAddress_ = validatorAddress_;
        result.targetWeight_ = targetWeight_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator) {
          return mergeFrom((crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator other) {
        if (other == crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator.getDefaultInstance()) return this;
        if (!other.getValidatorAddress().isEmpty()) {
          validatorAddress_ = other.validatorAddress_;
          onChanged();
        }
        if (!other.getTargetWeight().isEmpty()) {
          targetWeight_ = other.targetWeight_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object validatorAddress_ = "";
      /**
       * <pre>
       * validator_address defines the bech32-encoded address that whitelisted validator
       * </pre>
       *
       * <code>string validator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"validator_address&#92;""];</code>
       * @return The validatorAddress.
       */
      public java.lang.String getValidatorAddress() {
        java.lang.Object ref = validatorAddress_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          validatorAddress_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * validator_address defines the bech32-encoded address that whitelisted validator
       * </pre>
       *
       * <code>string validator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"validator_address&#92;""];</code>
       * @return The bytes for validatorAddress.
       */
      public com.google.protobuf.ByteString
          getValidatorAddressBytes() {
        java.lang.Object ref = validatorAddress_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          validatorAddress_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * validator_address defines the bech32-encoded address that whitelisted validator
       * </pre>
       *
       * <code>string validator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"validator_address&#92;""];</code>
       * @param value The validatorAddress to set.
       * @return This builder for chaining.
       */
      public Builder setValidatorAddress(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        validatorAddress_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * validator_address defines the bech32-encoded address that whitelisted validator
       * </pre>
       *
       * <code>string validator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"validator_address&#92;""];</code>
       * @return This builder for chaining.
       */
      public Builder clearValidatorAddress() {
        
        validatorAddress_ = getDefaultInstance().getValidatorAddress();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * validator_address defines the bech32-encoded address that whitelisted validator
       * </pre>
       *
       * <code>string validator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"validator_address&#92;""];</code>
       * @param value The bytes for validatorAddress to set.
       * @return This builder for chaining.
       */
      public Builder setValidatorAddressBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        validatorAddress_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object targetWeight_ = "";
      /**
       * <pre>
       * target_weight specifies the target weight for liquid staking, unstaking amount, which is a value for calculating
       * the real weight to be derived according to the active status
       * </pre>
       *
       * <code>string target_weight = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"target_weight&#92;""];</code>
       * @return The targetWeight.
       */
      public java.lang.String getTargetWeight() {
        java.lang.Object ref = targetWeight_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          targetWeight_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * target_weight specifies the target weight for liquid staking, unstaking amount, which is a value for calculating
       * the real weight to be derived according to the active status
       * </pre>
       *
       * <code>string target_weight = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"target_weight&#92;""];</code>
       * @return The bytes for targetWeight.
       */
      public com.google.protobuf.ByteString
          getTargetWeightBytes() {
        java.lang.Object ref = targetWeight_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          targetWeight_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * target_weight specifies the target weight for liquid staking, unstaking amount, which is a value for calculating
       * the real weight to be derived according to the active status
       * </pre>
       *
       * <code>string target_weight = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"target_weight&#92;""];</code>
       * @param value The targetWeight to set.
       * @return This builder for chaining.
       */
      public Builder setTargetWeight(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        targetWeight_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * target_weight specifies the target weight for liquid staking, unstaking amount, which is a value for calculating
       * the real weight to be derived according to the active status
       * </pre>
       *
       * <code>string target_weight = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"target_weight&#92;""];</code>
       * @return This builder for chaining.
       */
      public Builder clearTargetWeight() {
        
        targetWeight_ = getDefaultInstance().getTargetWeight();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * target_weight specifies the target weight for liquid staking, unstaking amount, which is a value for calculating
       * the real weight to be derived according to the active status
       * </pre>
       *
       * <code>string target_weight = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"target_weight&#92;""];</code>
       * @param value The bytes for targetWeight to set.
       * @return This builder for chaining.
       */
      public Builder setTargetWeightBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        targetWeight_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:crescent.liquidstaking.v1beta1.WhitelistedValidator)
    }

    // @@protoc_insertion_point(class_scope:crescent.liquidstaking.v1beta1.WhitelistedValidator)
    private static final crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator();
    }

    public static crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<WhitelistedValidator>
        PARSER = new com.google.protobuf.AbstractParser<WhitelistedValidator>() {
      @java.lang.Override
      public WhitelistedValidator parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new WhitelistedValidator(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<WhitelistedValidator> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<WhitelistedValidator> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public crescent.liquidstaking.v1beta1.Liquidstaking.WhitelistedValidator getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LiquidValidatorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:crescent.liquidstaking.v1beta1.LiquidValidator)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * operator_address defines the address of the validator's operator; bech encoded in JSON.
     * </pre>
     *
     * <code>string operator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"operator_address&#92;""];</code>
     * @return The operatorAddress.
     */
    java.lang.String getOperatorAddress();
    /**
     * <pre>
     * operator_address defines the address of the validator's operator; bech encoded in JSON.
     * </pre>
     *
     * <code>string operator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"operator_address&#92;""];</code>
     * @return The bytes for operatorAddress.
     */
    com.google.protobuf.ByteString
        getOperatorAddressBytes();
  }
  /**
   * <pre>
   * LiquidValidator defines a Validator that can be the target of LiquidStaking and LiquidUnstaking, Active, Weight, etc.
   * fields are derived as functions to deal with by maintaining consistency with the state of the staking module.
   * </pre>
   *
   * Protobuf type {@code crescent.liquidstaking.v1beta1.LiquidValidator}
   */
  public static final class LiquidValidator extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:crescent.liquidstaking.v1beta1.LiquidValidator)
      LiquidValidatorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use LiquidValidator.newBuilder() to construct.
    private LiquidValidator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LiquidValidator() {
      operatorAddress_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new LiquidValidator();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private LiquidValidator(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              operatorAddress_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_LiquidValidator_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_LiquidValidator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator.class, crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator.Builder.class);
    }

    public static final int OPERATOR_ADDRESS_FIELD_NUMBER = 1;
    private volatile java.lang.Object operatorAddress_;
    /**
     * <pre>
     * operator_address defines the address of the validator's operator; bech encoded in JSON.
     * </pre>
     *
     * <code>string operator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"operator_address&#92;""];</code>
     * @return The operatorAddress.
     */
    @java.lang.Override
    public java.lang.String getOperatorAddress() {
      java.lang.Object ref = operatorAddress_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        operatorAddress_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * operator_address defines the address of the validator's operator; bech encoded in JSON.
     * </pre>
     *
     * <code>string operator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"operator_address&#92;""];</code>
     * @return The bytes for operatorAddress.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getOperatorAddressBytes() {
      java.lang.Object ref = operatorAddress_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        operatorAddress_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getOperatorAddressBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, operatorAddress_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getOperatorAddressBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, operatorAddress_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator)) {
        return super.equals(obj);
      }
      crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator other = (crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator) obj;

      if (!getOperatorAddress()
          .equals(other.getOperatorAddress())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + OPERATOR_ADDRESS_FIELD_NUMBER;
      hash = (53 * hash) + getOperatorAddress().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * LiquidValidator defines a Validator that can be the target of LiquidStaking and LiquidUnstaking, Active, Weight, etc.
     * fields are derived as functions to deal with by maintaining consistency with the state of the staking module.
     * </pre>
     *
     * Protobuf type {@code crescent.liquidstaking.v1beta1.LiquidValidator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:crescent.liquidstaking.v1beta1.LiquidValidator)
        crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_LiquidValidator_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_LiquidValidator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator.class, crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator.Builder.class);
      }

      // Construct using crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        operatorAddress_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_LiquidValidator_descriptor;
      }

      @java.lang.Override
      public crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator getDefaultInstanceForType() {
        return crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator.getDefaultInstance();
      }

      @java.lang.Override
      public crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator build() {
        crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator buildPartial() {
        crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator result = new crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator(this);
        result.operatorAddress_ = operatorAddress_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator) {
          return mergeFrom((crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator other) {
        if (other == crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator.getDefaultInstance()) return this;
        if (!other.getOperatorAddress().isEmpty()) {
          operatorAddress_ = other.operatorAddress_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object operatorAddress_ = "";
      /**
       * <pre>
       * operator_address defines the address of the validator's operator; bech encoded in JSON.
       * </pre>
       *
       * <code>string operator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"operator_address&#92;""];</code>
       * @return The operatorAddress.
       */
      public java.lang.String getOperatorAddress() {
        java.lang.Object ref = operatorAddress_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          operatorAddress_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * operator_address defines the address of the validator's operator; bech encoded in JSON.
       * </pre>
       *
       * <code>string operator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"operator_address&#92;""];</code>
       * @return The bytes for operatorAddress.
       */
      public com.google.protobuf.ByteString
          getOperatorAddressBytes() {
        java.lang.Object ref = operatorAddress_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          operatorAddress_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * operator_address defines the address of the validator's operator; bech encoded in JSON.
       * </pre>
       *
       * <code>string operator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"operator_address&#92;""];</code>
       * @param value The operatorAddress to set.
       * @return This builder for chaining.
       */
      public Builder setOperatorAddress(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        operatorAddress_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * operator_address defines the address of the validator's operator; bech encoded in JSON.
       * </pre>
       *
       * <code>string operator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"operator_address&#92;""];</code>
       * @return This builder for chaining.
       */
      public Builder clearOperatorAddress() {
        
        operatorAddress_ = getDefaultInstance().getOperatorAddress();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * operator_address defines the address of the validator's operator; bech encoded in JSON.
       * </pre>
       *
       * <code>string operator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"operator_address&#92;""];</code>
       * @param value The bytes for operatorAddress to set.
       * @return This builder for chaining.
       */
      public Builder setOperatorAddressBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        operatorAddress_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:crescent.liquidstaking.v1beta1.LiquidValidator)
    }

    // @@protoc_insertion_point(class_scope:crescent.liquidstaking.v1beta1.LiquidValidator)
    private static final crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator();
    }

    public static crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LiquidValidator>
        PARSER = new com.google.protobuf.AbstractParser<LiquidValidator>() {
      @java.lang.Override
      public LiquidValidator parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LiquidValidator(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<LiquidValidator> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LiquidValidator> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidator getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LiquidValidatorStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:crescent.liquidstaking.v1beta1.LiquidValidatorState)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * operator_address defines the address of the validator's operator; bech encoded in JSON.
     * </pre>
     *
     * <code>string operator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"operator_address&#92;""];</code>
     * @return The operatorAddress.
     */
    java.lang.String getOperatorAddress();
    /**
     * <pre>
     * operator_address defines the address of the validator's operator; bech encoded in JSON.
     * </pre>
     *
     * <code>string operator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"operator_address&#92;""];</code>
     * @return The bytes for operatorAddress.
     */
    com.google.protobuf.ByteString
        getOperatorAddressBytes();

    /**
     * <pre>
     * weight specifies the weight for liquid staking, unstaking amount
     * </pre>
     *
     * <code>string weight = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"weight&#92;""];</code>
     * @return The weight.
     */
    java.lang.String getWeight();
    /**
     * <pre>
     * weight specifies the weight for liquid staking, unstaking amount
     * </pre>
     *
     * <code>string weight = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"weight&#92;""];</code>
     * @return The bytes for weight.
     */
    com.google.protobuf.ByteString
        getWeightBytes();

    /**
     * <pre>
     * status is the liquid validator status
     * </pre>
     *
     * <code>.crescent.liquidstaking.v1beta1.ValidatorStatus status = 3;</code>
     * @return The enum numeric value on the wire for status.
     */
    int getStatusValue();
    /**
     * <pre>
     * status is the liquid validator status
     * </pre>
     *
     * <code>.crescent.liquidstaking.v1beta1.ValidatorStatus status = 3;</code>
     * @return The status.
     */
    crescent.liquidstaking.v1beta1.Liquidstaking.ValidatorStatus getStatus();

    /**
     * <pre>
     * del_shares define the delegation shares of the validator
     * </pre>
     *
     * <code>string del_shares = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
     * @return The delShares.
     */
    java.lang.String getDelShares();
    /**
     * <pre>
     * del_shares define the delegation shares of the validator
     * </pre>
     *
     * <code>string del_shares = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
     * @return The bytes for delShares.
     */
    com.google.protobuf.ByteString
        getDelSharesBytes();

    /**
     * <pre>
     * liquid_tokens define the token amount worth of delegation shares of the validator (slashing applied amount)
     * </pre>
     *
     * <code>string liquid_tokens = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The liquidTokens.
     */
    java.lang.String getLiquidTokens();
    /**
     * <pre>
     * liquid_tokens define the token amount worth of delegation shares of the validator (slashing applied amount)
     * </pre>
     *
     * <code>string liquid_tokens = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The bytes for liquidTokens.
     */
    com.google.protobuf.ByteString
        getLiquidTokensBytes();
  }
  /**
   * <pre>
   * LiquidValidatorState is type LiquidValidator with state added to return to query results.
   * </pre>
   *
   * Protobuf type {@code crescent.liquidstaking.v1beta1.LiquidValidatorState}
   */
  public static final class LiquidValidatorState extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:crescent.liquidstaking.v1beta1.LiquidValidatorState)
      LiquidValidatorStateOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use LiquidValidatorState.newBuilder() to construct.
    private LiquidValidatorState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LiquidValidatorState() {
      operatorAddress_ = "";
      weight_ = "";
      status_ = 0;
      delShares_ = "";
      liquidTokens_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new LiquidValidatorState();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private LiquidValidatorState(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              operatorAddress_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              weight_ = s;
              break;
            }
            case 24: {
              int rawValue = input.readEnum();

              status_ = rawValue;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              delShares_ = s;
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              liquidTokens_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_LiquidValidatorState_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_LiquidValidatorState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState.class, crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState.Builder.class);
    }

    public static final int OPERATOR_ADDRESS_FIELD_NUMBER = 1;
    private volatile java.lang.Object operatorAddress_;
    /**
     * <pre>
     * operator_address defines the address of the validator's operator; bech encoded in JSON.
     * </pre>
     *
     * <code>string operator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"operator_address&#92;""];</code>
     * @return The operatorAddress.
     */
    @java.lang.Override
    public java.lang.String getOperatorAddress() {
      java.lang.Object ref = operatorAddress_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        operatorAddress_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * operator_address defines the address of the validator's operator; bech encoded in JSON.
     * </pre>
     *
     * <code>string operator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"operator_address&#92;""];</code>
     * @return The bytes for operatorAddress.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getOperatorAddressBytes() {
      java.lang.Object ref = operatorAddress_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        operatorAddress_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int WEIGHT_FIELD_NUMBER = 2;
    private volatile java.lang.Object weight_;
    /**
     * <pre>
     * weight specifies the weight for liquid staking, unstaking amount
     * </pre>
     *
     * <code>string weight = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"weight&#92;""];</code>
     * @return The weight.
     */
    @java.lang.Override
    public java.lang.String getWeight() {
      java.lang.Object ref = weight_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        weight_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * weight specifies the weight for liquid staking, unstaking amount
     * </pre>
     *
     * <code>string weight = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"weight&#92;""];</code>
     * @return The bytes for weight.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getWeightBytes() {
      java.lang.Object ref = weight_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        weight_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int STATUS_FIELD_NUMBER = 3;
    private int status_;
    /**
     * <pre>
     * status is the liquid validator status
     * </pre>
     *
     * <code>.crescent.liquidstaking.v1beta1.ValidatorStatus status = 3;</code>
     * @return The enum numeric value on the wire for status.
     */
    @java.lang.Override public int getStatusValue() {
      return status_;
    }
    /**
     * <pre>
     * status is the liquid validator status
     * </pre>
     *
     * <code>.crescent.liquidstaking.v1beta1.ValidatorStatus status = 3;</code>
     * @return The status.
     */
    @java.lang.Override public crescent.liquidstaking.v1beta1.Liquidstaking.ValidatorStatus getStatus() {
      @SuppressWarnings("deprecation")
      crescent.liquidstaking.v1beta1.Liquidstaking.ValidatorStatus result = crescent.liquidstaking.v1beta1.Liquidstaking.ValidatorStatus.valueOf(status_);
      return result == null ? crescent.liquidstaking.v1beta1.Liquidstaking.ValidatorStatus.UNRECOGNIZED : result;
    }

    public static final int DEL_SHARES_FIELD_NUMBER = 4;
    private volatile java.lang.Object delShares_;
    /**
     * <pre>
     * del_shares define the delegation shares of the validator
     * </pre>
     *
     * <code>string del_shares = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
     * @return The delShares.
     */
    @java.lang.Override
    public java.lang.String getDelShares() {
      java.lang.Object ref = delShares_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        delShares_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * del_shares define the delegation shares of the validator
     * </pre>
     *
     * <code>string del_shares = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
     * @return The bytes for delShares.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDelSharesBytes() {
      java.lang.Object ref = delShares_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        delShares_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LIQUID_TOKENS_FIELD_NUMBER = 5;
    private volatile java.lang.Object liquidTokens_;
    /**
     * <pre>
     * liquid_tokens define the token amount worth of delegation shares of the validator (slashing applied amount)
     * </pre>
     *
     * <code>string liquid_tokens = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The liquidTokens.
     */
    @java.lang.Override
    public java.lang.String getLiquidTokens() {
      java.lang.Object ref = liquidTokens_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        liquidTokens_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * liquid_tokens define the token amount worth of delegation shares of the validator (slashing applied amount)
     * </pre>
     *
     * <code>string liquid_tokens = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The bytes for liquidTokens.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLiquidTokensBytes() {
      java.lang.Object ref = liquidTokens_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        liquidTokens_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getOperatorAddressBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, operatorAddress_);
      }
      if (!getWeightBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, weight_);
      }
      if (status_ != crescent.liquidstaking.v1beta1.Liquidstaking.ValidatorStatus.VALIDATOR_STATUS_UNSPECIFIED.getNumber()) {
        output.writeEnum(3, status_);
      }
      if (!getDelSharesBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, delShares_);
      }
      if (!getLiquidTokensBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, liquidTokens_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getOperatorAddressBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, operatorAddress_);
      }
      if (!getWeightBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, weight_);
      }
      if (status_ != crescent.liquidstaking.v1beta1.Liquidstaking.ValidatorStatus.VALIDATOR_STATUS_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, status_);
      }
      if (!getDelSharesBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, delShares_);
      }
      if (!getLiquidTokensBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, liquidTokens_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState)) {
        return super.equals(obj);
      }
      crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState other = (crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState) obj;

      if (!getOperatorAddress()
          .equals(other.getOperatorAddress())) return false;
      if (!getWeight()
          .equals(other.getWeight())) return false;
      if (status_ != other.status_) return false;
      if (!getDelShares()
          .equals(other.getDelShares())) return false;
      if (!getLiquidTokens()
          .equals(other.getLiquidTokens())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + OPERATOR_ADDRESS_FIELD_NUMBER;
      hash = (53 * hash) + getOperatorAddress().hashCode();
      hash = (37 * hash) + WEIGHT_FIELD_NUMBER;
      hash = (53 * hash) + getWeight().hashCode();
      hash = (37 * hash) + STATUS_FIELD_NUMBER;
      hash = (53 * hash) + status_;
      hash = (37 * hash) + DEL_SHARES_FIELD_NUMBER;
      hash = (53 * hash) + getDelShares().hashCode();
      hash = (37 * hash) + LIQUID_TOKENS_FIELD_NUMBER;
      hash = (53 * hash) + getLiquidTokens().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * LiquidValidatorState is type LiquidValidator with state added to return to query results.
     * </pre>
     *
     * Protobuf type {@code crescent.liquidstaking.v1beta1.LiquidValidatorState}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:crescent.liquidstaking.v1beta1.LiquidValidatorState)
        crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_LiquidValidatorState_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_LiquidValidatorState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState.class, crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState.Builder.class);
      }

      // Construct using crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        operatorAddress_ = "";

        weight_ = "";

        status_ = 0;

        delShares_ = "";

        liquidTokens_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_LiquidValidatorState_descriptor;
      }

      @java.lang.Override
      public crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState getDefaultInstanceForType() {
        return crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState.getDefaultInstance();
      }

      @java.lang.Override
      public crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState build() {
        crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState buildPartial() {
        crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState result = new crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState(this);
        result.operatorAddress_ = operatorAddress_;
        result.weight_ = weight_;
        result.status_ = status_;
        result.delShares_ = delShares_;
        result.liquidTokens_ = liquidTokens_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState) {
          return mergeFrom((crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState other) {
        if (other == crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState.getDefaultInstance()) return this;
        if (!other.getOperatorAddress().isEmpty()) {
          operatorAddress_ = other.operatorAddress_;
          onChanged();
        }
        if (!other.getWeight().isEmpty()) {
          weight_ = other.weight_;
          onChanged();
        }
        if (other.status_ != 0) {
          setStatusValue(other.getStatusValue());
        }
        if (!other.getDelShares().isEmpty()) {
          delShares_ = other.delShares_;
          onChanged();
        }
        if (!other.getLiquidTokens().isEmpty()) {
          liquidTokens_ = other.liquidTokens_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object operatorAddress_ = "";
      /**
       * <pre>
       * operator_address defines the address of the validator's operator; bech encoded in JSON.
       * </pre>
       *
       * <code>string operator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"operator_address&#92;""];</code>
       * @return The operatorAddress.
       */
      public java.lang.String getOperatorAddress() {
        java.lang.Object ref = operatorAddress_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          operatorAddress_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * operator_address defines the address of the validator's operator; bech encoded in JSON.
       * </pre>
       *
       * <code>string operator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"operator_address&#92;""];</code>
       * @return The bytes for operatorAddress.
       */
      public com.google.protobuf.ByteString
          getOperatorAddressBytes() {
        java.lang.Object ref = operatorAddress_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          operatorAddress_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * operator_address defines the address of the validator's operator; bech encoded in JSON.
       * </pre>
       *
       * <code>string operator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"operator_address&#92;""];</code>
       * @param value The operatorAddress to set.
       * @return This builder for chaining.
       */
      public Builder setOperatorAddress(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        operatorAddress_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * operator_address defines the address of the validator's operator; bech encoded in JSON.
       * </pre>
       *
       * <code>string operator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"operator_address&#92;""];</code>
       * @return This builder for chaining.
       */
      public Builder clearOperatorAddress() {
        
        operatorAddress_ = getDefaultInstance().getOperatorAddress();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * operator_address defines the address of the validator's operator; bech encoded in JSON.
       * </pre>
       *
       * <code>string operator_address = 1 [(.gogoproto.moretags) = "yaml:&#92;"operator_address&#92;""];</code>
       * @param value The bytes for operatorAddress to set.
       * @return This builder for chaining.
       */
      public Builder setOperatorAddressBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        operatorAddress_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object weight_ = "";
      /**
       * <pre>
       * weight specifies the weight for liquid staking, unstaking amount
       * </pre>
       *
       * <code>string weight = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"weight&#92;""];</code>
       * @return The weight.
       */
      public java.lang.String getWeight() {
        java.lang.Object ref = weight_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          weight_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * weight specifies the weight for liquid staking, unstaking amount
       * </pre>
       *
       * <code>string weight = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"weight&#92;""];</code>
       * @return The bytes for weight.
       */
      public com.google.protobuf.ByteString
          getWeightBytes() {
        java.lang.Object ref = weight_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          weight_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * weight specifies the weight for liquid staking, unstaking amount
       * </pre>
       *
       * <code>string weight = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"weight&#92;""];</code>
       * @param value The weight to set.
       * @return This builder for chaining.
       */
      public Builder setWeight(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        weight_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * weight specifies the weight for liquid staking, unstaking amount
       * </pre>
       *
       * <code>string weight = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"weight&#92;""];</code>
       * @return This builder for chaining.
       */
      public Builder clearWeight() {
        
        weight_ = getDefaultInstance().getWeight();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * weight specifies the weight for liquid staking, unstaking amount
       * </pre>
       *
       * <code>string weight = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"weight&#92;""];</code>
       * @param value The bytes for weight to set.
       * @return This builder for chaining.
       */
      public Builder setWeightBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        weight_ = value;
        onChanged();
        return this;
      }

      private int status_ = 0;
      /**
       * <pre>
       * status is the liquid validator status
       * </pre>
       *
       * <code>.crescent.liquidstaking.v1beta1.ValidatorStatus status = 3;</code>
       * @return The enum numeric value on the wire for status.
       */
      @java.lang.Override public int getStatusValue() {
        return status_;
      }
      /**
       * <pre>
       * status is the liquid validator status
       * </pre>
       *
       * <code>.crescent.liquidstaking.v1beta1.ValidatorStatus status = 3;</code>
       * @param value The enum numeric value on the wire for status to set.
       * @return This builder for chaining.
       */
      public Builder setStatusValue(int value) {
        
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * status is the liquid validator status
       * </pre>
       *
       * <code>.crescent.liquidstaking.v1beta1.ValidatorStatus status = 3;</code>
       * @return The status.
       */
      @java.lang.Override
      public crescent.liquidstaking.v1beta1.Liquidstaking.ValidatorStatus getStatus() {
        @SuppressWarnings("deprecation")
        crescent.liquidstaking.v1beta1.Liquidstaking.ValidatorStatus result = crescent.liquidstaking.v1beta1.Liquidstaking.ValidatorStatus.valueOf(status_);
        return result == null ? crescent.liquidstaking.v1beta1.Liquidstaking.ValidatorStatus.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * status is the liquid validator status
       * </pre>
       *
       * <code>.crescent.liquidstaking.v1beta1.ValidatorStatus status = 3;</code>
       * @param value The status to set.
       * @return This builder for chaining.
       */
      public Builder setStatus(crescent.liquidstaking.v1beta1.Liquidstaking.ValidatorStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        status_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * status is the liquid validator status
       * </pre>
       *
       * <code>.crescent.liquidstaking.v1beta1.ValidatorStatus status = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearStatus() {
        
        status_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object delShares_ = "";
      /**
       * <pre>
       * del_shares define the delegation shares of the validator
       * </pre>
       *
       * <code>string del_shares = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
       * @return The delShares.
       */
      public java.lang.String getDelShares() {
        java.lang.Object ref = delShares_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          delShares_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * del_shares define the delegation shares of the validator
       * </pre>
       *
       * <code>string del_shares = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
       * @return The bytes for delShares.
       */
      public com.google.protobuf.ByteString
          getDelSharesBytes() {
        java.lang.Object ref = delShares_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          delShares_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * del_shares define the delegation shares of the validator
       * </pre>
       *
       * <code>string del_shares = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
       * @param value The delShares to set.
       * @return This builder for chaining.
       */
      public Builder setDelShares(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        delShares_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * del_shares define the delegation shares of the validator
       * </pre>
       *
       * <code>string del_shares = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
       * @return This builder for chaining.
       */
      public Builder clearDelShares() {
        
        delShares_ = getDefaultInstance().getDelShares();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * del_shares define the delegation shares of the validator
       * </pre>
       *
       * <code>string del_shares = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
       * @param value The bytes for delShares to set.
       * @return This builder for chaining.
       */
      public Builder setDelSharesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        delShares_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object liquidTokens_ = "";
      /**
       * <pre>
       * liquid_tokens define the token amount worth of delegation shares of the validator (slashing applied amount)
       * </pre>
       *
       * <code>string liquid_tokens = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @return The liquidTokens.
       */
      public java.lang.String getLiquidTokens() {
        java.lang.Object ref = liquidTokens_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          liquidTokens_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * liquid_tokens define the token amount worth of delegation shares of the validator (slashing applied amount)
       * </pre>
       *
       * <code>string liquid_tokens = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @return The bytes for liquidTokens.
       */
      public com.google.protobuf.ByteString
          getLiquidTokensBytes() {
        java.lang.Object ref = liquidTokens_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          liquidTokens_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * liquid_tokens define the token amount worth of delegation shares of the validator (slashing applied amount)
       * </pre>
       *
       * <code>string liquid_tokens = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @param value The liquidTokens to set.
       * @return This builder for chaining.
       */
      public Builder setLiquidTokens(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        liquidTokens_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * liquid_tokens define the token amount worth of delegation shares of the validator (slashing applied amount)
       * </pre>
       *
       * <code>string liquid_tokens = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @return This builder for chaining.
       */
      public Builder clearLiquidTokens() {
        
        liquidTokens_ = getDefaultInstance().getLiquidTokens();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * liquid_tokens define the token amount worth of delegation shares of the validator (slashing applied amount)
       * </pre>
       *
       * <code>string liquid_tokens = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @param value The bytes for liquidTokens to set.
       * @return This builder for chaining.
       */
      public Builder setLiquidTokensBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        liquidTokens_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:crescent.liquidstaking.v1beta1.LiquidValidatorState)
    }

    // @@protoc_insertion_point(class_scope:crescent.liquidstaking.v1beta1.LiquidValidatorState)
    private static final crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState();
    }

    public static crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LiquidValidatorState>
        PARSER = new com.google.protobuf.AbstractParser<LiquidValidatorState>() {
      @java.lang.Override
      public LiquidValidatorState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LiquidValidatorState(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<LiquidValidatorState> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LiquidValidatorState> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public crescent.liquidstaking.v1beta1.Liquidstaking.LiquidValidatorState getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface NetAmountStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:crescent.liquidstaking.v1beta1.NetAmountState)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * mint_rate is bTokenTotalSupply / NetAmount
     * </pre>
     *
     * <code>string mint_rate = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
     * @return The mintRate.
     */
    java.lang.String getMintRate();
    /**
     * <pre>
     * mint_rate is bTokenTotalSupply / NetAmount
     * </pre>
     *
     * <code>string mint_rate = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
     * @return The bytes for mintRate.
     */
    com.google.protobuf.ByteString
        getMintRateBytes();

    /**
     * <pre>
     * btoken_total_supply returns the total supply of btoken(liquid_bond_denom)
     * </pre>
     *
     * <code>string btoken_total_supply = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The btokenTotalSupply.
     */
    java.lang.String getBtokenTotalSupply();
    /**
     * <pre>
     * btoken_total_supply returns the total supply of btoken(liquid_bond_denom)
     * </pre>
     *
     * <code>string btoken_total_supply = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The bytes for btokenTotalSupply.
     */
    com.google.protobuf.ByteString
        getBtokenTotalSupplyBytes();

    /**
     * <pre>
     * net_amount is proxy account's native token balance + total liquid tokens + total remaining rewards + total
     * unbonding balance
     * </pre>
     *
     * <code>string net_amount = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
     * @return The netAmount.
     */
    java.lang.String getNetAmount();
    /**
     * <pre>
     * net_amount is proxy account's native token balance + total liquid tokens + total remaining rewards + total
     * unbonding balance
     * </pre>
     *
     * <code>string net_amount = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
     * @return The bytes for netAmount.
     */
    com.google.protobuf.ByteString
        getNetAmountBytes();

    /**
     * <pre>
     * total_del_shares define the delegation shares of all liquid validators
     * </pre>
     *
     * <code>string total_del_shares = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
     * @return The totalDelShares.
     */
    java.lang.String getTotalDelShares();
    /**
     * <pre>
     * total_del_shares define the delegation shares of all liquid validators
     * </pre>
     *
     * <code>string total_del_shares = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
     * @return The bytes for totalDelShares.
     */
    com.google.protobuf.ByteString
        getTotalDelSharesBytes();

    /**
     * <pre>
     * total_liquid_tokens define the token amount worth of delegation shares of all liquid validator (slashing applied
     * amount)
     * </pre>
     *
     * <code>string total_liquid_tokens = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The totalLiquidTokens.
     */
    java.lang.String getTotalLiquidTokens();
    /**
     * <pre>
     * total_liquid_tokens define the token amount worth of delegation shares of all liquid validator (slashing applied
     * amount)
     * </pre>
     *
     * <code>string total_liquid_tokens = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The bytes for totalLiquidTokens.
     */
    com.google.protobuf.ByteString
        getTotalLiquidTokensBytes();

    /**
     * <pre>
     * total_remaining_rewards define the sum of remaining rewards of proxy account by all liquid validators
     * </pre>
     *
     * <code>string total_remaining_rewards = 6 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
     * @return The totalRemainingRewards.
     */
    java.lang.String getTotalRemainingRewards();
    /**
     * <pre>
     * total_remaining_rewards define the sum of remaining rewards of proxy account by all liquid validators
     * </pre>
     *
     * <code>string total_remaining_rewards = 6 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
     * @return The bytes for totalRemainingRewards.
     */
    com.google.protobuf.ByteString
        getTotalRemainingRewardsBytes();

    /**
     * <pre>
     * total_unbonding_balance define the unbonding balance of proxy account by all liquid validator (slashing applied
     * amount)
     * </pre>
     *
     * <code>string total_unbonding_balance = 7 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The totalUnbondingBalance.
     */
    java.lang.String getTotalUnbondingBalance();
    /**
     * <pre>
     * total_unbonding_balance define the unbonding balance of proxy account by all liquid validator (slashing applied
     * amount)
     * </pre>
     *
     * <code>string total_unbonding_balance = 7 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The bytes for totalUnbondingBalance.
     */
    com.google.protobuf.ByteString
        getTotalUnbondingBalanceBytes();

    /**
     * <pre>
     * proxy_acc_balance define the balance of proxy account for the native token
     * </pre>
     *
     * <code>string proxy_acc_balance = 8 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The proxyAccBalance.
     */
    java.lang.String getProxyAccBalance();
    /**
     * <pre>
     * proxy_acc_balance define the balance of proxy account for the native token
     * </pre>
     *
     * <code>string proxy_acc_balance = 8 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The bytes for proxyAccBalance.
     */
    com.google.protobuf.ByteString
        getProxyAccBalanceBytes();
  }
  /**
   * <pre>
   * NetAmountState is type for net amount raw data and mint rate, This is a value that depends on the several module
   * state every time, so it is used only for calculation and query and is not stored in kv.
   * </pre>
   *
   * Protobuf type {@code crescent.liquidstaking.v1beta1.NetAmountState}
   */
  public static final class NetAmountState extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:crescent.liquidstaking.v1beta1.NetAmountState)
      NetAmountStateOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use NetAmountState.newBuilder() to construct.
    private NetAmountState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private NetAmountState() {
      mintRate_ = "";
      btokenTotalSupply_ = "";
      netAmount_ = "";
      totalDelShares_ = "";
      totalLiquidTokens_ = "";
      totalRemainingRewards_ = "";
      totalUnbondingBalance_ = "";
      proxyAccBalance_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new NetAmountState();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private NetAmountState(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              mintRate_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              btokenTotalSupply_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              netAmount_ = s;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              totalDelShares_ = s;
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              totalLiquidTokens_ = s;
              break;
            }
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();

              totalRemainingRewards_ = s;
              break;
            }
            case 58: {
              java.lang.String s = input.readStringRequireUtf8();

              totalUnbondingBalance_ = s;
              break;
            }
            case 66: {
              java.lang.String s = input.readStringRequireUtf8();

              proxyAccBalance_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_NetAmountState_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_NetAmountState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState.class, crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState.Builder.class);
    }

    public static final int MINT_RATE_FIELD_NUMBER = 1;
    private volatile java.lang.Object mintRate_;
    /**
     * <pre>
     * mint_rate is bTokenTotalSupply / NetAmount
     * </pre>
     *
     * <code>string mint_rate = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
     * @return The mintRate.
     */
    @java.lang.Override
    public java.lang.String getMintRate() {
      java.lang.Object ref = mintRate_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        mintRate_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * mint_rate is bTokenTotalSupply / NetAmount
     * </pre>
     *
     * <code>string mint_rate = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
     * @return The bytes for mintRate.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMintRateBytes() {
      java.lang.Object ref = mintRate_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mintRate_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BTOKEN_TOTAL_SUPPLY_FIELD_NUMBER = 2;
    private volatile java.lang.Object btokenTotalSupply_;
    /**
     * <pre>
     * btoken_total_supply returns the total supply of btoken(liquid_bond_denom)
     * </pre>
     *
     * <code>string btoken_total_supply = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The btokenTotalSupply.
     */
    @java.lang.Override
    public java.lang.String getBtokenTotalSupply() {
      java.lang.Object ref = btokenTotalSupply_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        btokenTotalSupply_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * btoken_total_supply returns the total supply of btoken(liquid_bond_denom)
     * </pre>
     *
     * <code>string btoken_total_supply = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The bytes for btokenTotalSupply.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getBtokenTotalSupplyBytes() {
      java.lang.Object ref = btokenTotalSupply_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        btokenTotalSupply_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NET_AMOUNT_FIELD_NUMBER = 3;
    private volatile java.lang.Object netAmount_;
    /**
     * <pre>
     * net_amount is proxy account's native token balance + total liquid tokens + total remaining rewards + total
     * unbonding balance
     * </pre>
     *
     * <code>string net_amount = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
     * @return The netAmount.
     */
    @java.lang.Override
    public java.lang.String getNetAmount() {
      java.lang.Object ref = netAmount_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        netAmount_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * net_amount is proxy account's native token balance + total liquid tokens + total remaining rewards + total
     * unbonding balance
     * </pre>
     *
     * <code>string net_amount = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
     * @return The bytes for netAmount.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNetAmountBytes() {
      java.lang.Object ref = netAmount_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        netAmount_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TOTAL_DEL_SHARES_FIELD_NUMBER = 4;
    private volatile java.lang.Object totalDelShares_;
    /**
     * <pre>
     * total_del_shares define the delegation shares of all liquid validators
     * </pre>
     *
     * <code>string total_del_shares = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
     * @return The totalDelShares.
     */
    @java.lang.Override
    public java.lang.String getTotalDelShares() {
      java.lang.Object ref = totalDelShares_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        totalDelShares_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * total_del_shares define the delegation shares of all liquid validators
     * </pre>
     *
     * <code>string total_del_shares = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
     * @return The bytes for totalDelShares.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTotalDelSharesBytes() {
      java.lang.Object ref = totalDelShares_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        totalDelShares_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TOTAL_LIQUID_TOKENS_FIELD_NUMBER = 5;
    private volatile java.lang.Object totalLiquidTokens_;
    /**
     * <pre>
     * total_liquid_tokens define the token amount worth of delegation shares of all liquid validator (slashing applied
     * amount)
     * </pre>
     *
     * <code>string total_liquid_tokens = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The totalLiquidTokens.
     */
    @java.lang.Override
    public java.lang.String getTotalLiquidTokens() {
      java.lang.Object ref = totalLiquidTokens_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        totalLiquidTokens_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * total_liquid_tokens define the token amount worth of delegation shares of all liquid validator (slashing applied
     * amount)
     * </pre>
     *
     * <code>string total_liquid_tokens = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The bytes for totalLiquidTokens.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTotalLiquidTokensBytes() {
      java.lang.Object ref = totalLiquidTokens_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        totalLiquidTokens_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TOTAL_REMAINING_REWARDS_FIELD_NUMBER = 6;
    private volatile java.lang.Object totalRemainingRewards_;
    /**
     * <pre>
     * total_remaining_rewards define the sum of remaining rewards of proxy account by all liquid validators
     * </pre>
     *
     * <code>string total_remaining_rewards = 6 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
     * @return The totalRemainingRewards.
     */
    @java.lang.Override
    public java.lang.String getTotalRemainingRewards() {
      java.lang.Object ref = totalRemainingRewards_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        totalRemainingRewards_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * total_remaining_rewards define the sum of remaining rewards of proxy account by all liquid validators
     * </pre>
     *
     * <code>string total_remaining_rewards = 6 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
     * @return The bytes for totalRemainingRewards.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTotalRemainingRewardsBytes() {
      java.lang.Object ref = totalRemainingRewards_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        totalRemainingRewards_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TOTAL_UNBONDING_BALANCE_FIELD_NUMBER = 7;
    private volatile java.lang.Object totalUnbondingBalance_;
    /**
     * <pre>
     * total_unbonding_balance define the unbonding balance of proxy account by all liquid validator (slashing applied
     * amount)
     * </pre>
     *
     * <code>string total_unbonding_balance = 7 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The totalUnbondingBalance.
     */
    @java.lang.Override
    public java.lang.String getTotalUnbondingBalance() {
      java.lang.Object ref = totalUnbondingBalance_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        totalUnbondingBalance_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * total_unbonding_balance define the unbonding balance of proxy account by all liquid validator (slashing applied
     * amount)
     * </pre>
     *
     * <code>string total_unbonding_balance = 7 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The bytes for totalUnbondingBalance.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTotalUnbondingBalanceBytes() {
      java.lang.Object ref = totalUnbondingBalance_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        totalUnbondingBalance_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PROXY_ACC_BALANCE_FIELD_NUMBER = 8;
    private volatile java.lang.Object proxyAccBalance_;
    /**
     * <pre>
     * proxy_acc_balance define the balance of proxy account for the native token
     * </pre>
     *
     * <code>string proxy_acc_balance = 8 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The proxyAccBalance.
     */
    @java.lang.Override
    public java.lang.String getProxyAccBalance() {
      java.lang.Object ref = proxyAccBalance_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        proxyAccBalance_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * proxy_acc_balance define the balance of proxy account for the native token
     * </pre>
     *
     * <code>string proxy_acc_balance = 8 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The bytes for proxyAccBalance.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getProxyAccBalanceBytes() {
      java.lang.Object ref = proxyAccBalance_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        proxyAccBalance_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getMintRateBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, mintRate_);
      }
      if (!getBtokenTotalSupplyBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, btokenTotalSupply_);
      }
      if (!getNetAmountBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, netAmount_);
      }
      if (!getTotalDelSharesBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, totalDelShares_);
      }
      if (!getTotalLiquidTokensBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, totalLiquidTokens_);
      }
      if (!getTotalRemainingRewardsBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, totalRemainingRewards_);
      }
      if (!getTotalUnbondingBalanceBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, totalUnbondingBalance_);
      }
      if (!getProxyAccBalanceBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 8, proxyAccBalance_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getMintRateBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, mintRate_);
      }
      if (!getBtokenTotalSupplyBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, btokenTotalSupply_);
      }
      if (!getNetAmountBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, netAmount_);
      }
      if (!getTotalDelSharesBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, totalDelShares_);
      }
      if (!getTotalLiquidTokensBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, totalLiquidTokens_);
      }
      if (!getTotalRemainingRewardsBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, totalRemainingRewards_);
      }
      if (!getTotalUnbondingBalanceBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, totalUnbondingBalance_);
      }
      if (!getProxyAccBalanceBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, proxyAccBalance_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState)) {
        return super.equals(obj);
      }
      crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState other = (crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState) obj;

      if (!getMintRate()
          .equals(other.getMintRate())) return false;
      if (!getBtokenTotalSupply()
          .equals(other.getBtokenTotalSupply())) return false;
      if (!getNetAmount()
          .equals(other.getNetAmount())) return false;
      if (!getTotalDelShares()
          .equals(other.getTotalDelShares())) return false;
      if (!getTotalLiquidTokens()
          .equals(other.getTotalLiquidTokens())) return false;
      if (!getTotalRemainingRewards()
          .equals(other.getTotalRemainingRewards())) return false;
      if (!getTotalUnbondingBalance()
          .equals(other.getTotalUnbondingBalance())) return false;
      if (!getProxyAccBalance()
          .equals(other.getProxyAccBalance())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + MINT_RATE_FIELD_NUMBER;
      hash = (53 * hash) + getMintRate().hashCode();
      hash = (37 * hash) + BTOKEN_TOTAL_SUPPLY_FIELD_NUMBER;
      hash = (53 * hash) + getBtokenTotalSupply().hashCode();
      hash = (37 * hash) + NET_AMOUNT_FIELD_NUMBER;
      hash = (53 * hash) + getNetAmount().hashCode();
      hash = (37 * hash) + TOTAL_DEL_SHARES_FIELD_NUMBER;
      hash = (53 * hash) + getTotalDelShares().hashCode();
      hash = (37 * hash) + TOTAL_LIQUID_TOKENS_FIELD_NUMBER;
      hash = (53 * hash) + getTotalLiquidTokens().hashCode();
      hash = (37 * hash) + TOTAL_REMAINING_REWARDS_FIELD_NUMBER;
      hash = (53 * hash) + getTotalRemainingRewards().hashCode();
      hash = (37 * hash) + TOTAL_UNBONDING_BALANCE_FIELD_NUMBER;
      hash = (53 * hash) + getTotalUnbondingBalance().hashCode();
      hash = (37 * hash) + PROXY_ACC_BALANCE_FIELD_NUMBER;
      hash = (53 * hash) + getProxyAccBalance().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * NetAmountState is type for net amount raw data and mint rate, This is a value that depends on the several module
     * state every time, so it is used only for calculation and query and is not stored in kv.
     * </pre>
     *
     * Protobuf type {@code crescent.liquidstaking.v1beta1.NetAmountState}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:crescent.liquidstaking.v1beta1.NetAmountState)
        crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_NetAmountState_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_NetAmountState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState.class, crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState.Builder.class);
      }

      // Construct using crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        mintRate_ = "";

        btokenTotalSupply_ = "";

        netAmount_ = "";

        totalDelShares_ = "";

        totalLiquidTokens_ = "";

        totalRemainingRewards_ = "";

        totalUnbondingBalance_ = "";

        proxyAccBalance_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_NetAmountState_descriptor;
      }

      @java.lang.Override
      public crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState getDefaultInstanceForType() {
        return crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState.getDefaultInstance();
      }

      @java.lang.Override
      public crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState build() {
        crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState buildPartial() {
        crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState result = new crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState(this);
        result.mintRate_ = mintRate_;
        result.btokenTotalSupply_ = btokenTotalSupply_;
        result.netAmount_ = netAmount_;
        result.totalDelShares_ = totalDelShares_;
        result.totalLiquidTokens_ = totalLiquidTokens_;
        result.totalRemainingRewards_ = totalRemainingRewards_;
        result.totalUnbondingBalance_ = totalUnbondingBalance_;
        result.proxyAccBalance_ = proxyAccBalance_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState) {
          return mergeFrom((crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState other) {
        if (other == crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState.getDefaultInstance()) return this;
        if (!other.getMintRate().isEmpty()) {
          mintRate_ = other.mintRate_;
          onChanged();
        }
        if (!other.getBtokenTotalSupply().isEmpty()) {
          btokenTotalSupply_ = other.btokenTotalSupply_;
          onChanged();
        }
        if (!other.getNetAmount().isEmpty()) {
          netAmount_ = other.netAmount_;
          onChanged();
        }
        if (!other.getTotalDelShares().isEmpty()) {
          totalDelShares_ = other.totalDelShares_;
          onChanged();
        }
        if (!other.getTotalLiquidTokens().isEmpty()) {
          totalLiquidTokens_ = other.totalLiquidTokens_;
          onChanged();
        }
        if (!other.getTotalRemainingRewards().isEmpty()) {
          totalRemainingRewards_ = other.totalRemainingRewards_;
          onChanged();
        }
        if (!other.getTotalUnbondingBalance().isEmpty()) {
          totalUnbondingBalance_ = other.totalUnbondingBalance_;
          onChanged();
        }
        if (!other.getProxyAccBalance().isEmpty()) {
          proxyAccBalance_ = other.proxyAccBalance_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object mintRate_ = "";
      /**
       * <pre>
       * mint_rate is bTokenTotalSupply / NetAmount
       * </pre>
       *
       * <code>string mint_rate = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
       * @return The mintRate.
       */
      public java.lang.String getMintRate() {
        java.lang.Object ref = mintRate_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          mintRate_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * mint_rate is bTokenTotalSupply / NetAmount
       * </pre>
       *
       * <code>string mint_rate = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
       * @return The bytes for mintRate.
       */
      public com.google.protobuf.ByteString
          getMintRateBytes() {
        java.lang.Object ref = mintRate_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mintRate_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * mint_rate is bTokenTotalSupply / NetAmount
       * </pre>
       *
       * <code>string mint_rate = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
       * @param value The mintRate to set.
       * @return This builder for chaining.
       */
      public Builder setMintRate(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        mintRate_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * mint_rate is bTokenTotalSupply / NetAmount
       * </pre>
       *
       * <code>string mint_rate = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
       * @return This builder for chaining.
       */
      public Builder clearMintRate() {
        
        mintRate_ = getDefaultInstance().getMintRate();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * mint_rate is bTokenTotalSupply / NetAmount
       * </pre>
       *
       * <code>string mint_rate = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
       * @param value The bytes for mintRate to set.
       * @return This builder for chaining.
       */
      public Builder setMintRateBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        mintRate_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object btokenTotalSupply_ = "";
      /**
       * <pre>
       * btoken_total_supply returns the total supply of btoken(liquid_bond_denom)
       * </pre>
       *
       * <code>string btoken_total_supply = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @return The btokenTotalSupply.
       */
      public java.lang.String getBtokenTotalSupply() {
        java.lang.Object ref = btokenTotalSupply_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          btokenTotalSupply_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * btoken_total_supply returns the total supply of btoken(liquid_bond_denom)
       * </pre>
       *
       * <code>string btoken_total_supply = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @return The bytes for btokenTotalSupply.
       */
      public com.google.protobuf.ByteString
          getBtokenTotalSupplyBytes() {
        java.lang.Object ref = btokenTotalSupply_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          btokenTotalSupply_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * btoken_total_supply returns the total supply of btoken(liquid_bond_denom)
       * </pre>
       *
       * <code>string btoken_total_supply = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @param value The btokenTotalSupply to set.
       * @return This builder for chaining.
       */
      public Builder setBtokenTotalSupply(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        btokenTotalSupply_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * btoken_total_supply returns the total supply of btoken(liquid_bond_denom)
       * </pre>
       *
       * <code>string btoken_total_supply = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBtokenTotalSupply() {
        
        btokenTotalSupply_ = getDefaultInstance().getBtokenTotalSupply();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * btoken_total_supply returns the total supply of btoken(liquid_bond_denom)
       * </pre>
       *
       * <code>string btoken_total_supply = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @param value The bytes for btokenTotalSupply to set.
       * @return This builder for chaining.
       */
      public Builder setBtokenTotalSupplyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        btokenTotalSupply_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object netAmount_ = "";
      /**
       * <pre>
       * net_amount is proxy account's native token balance + total liquid tokens + total remaining rewards + total
       * unbonding balance
       * </pre>
       *
       * <code>string net_amount = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
       * @return The netAmount.
       */
      public java.lang.String getNetAmount() {
        java.lang.Object ref = netAmount_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          netAmount_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * net_amount is proxy account's native token balance + total liquid tokens + total remaining rewards + total
       * unbonding balance
       * </pre>
       *
       * <code>string net_amount = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
       * @return The bytes for netAmount.
       */
      public com.google.protobuf.ByteString
          getNetAmountBytes() {
        java.lang.Object ref = netAmount_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          netAmount_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * net_amount is proxy account's native token balance + total liquid tokens + total remaining rewards + total
       * unbonding balance
       * </pre>
       *
       * <code>string net_amount = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
       * @param value The netAmount to set.
       * @return This builder for chaining.
       */
      public Builder setNetAmount(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        netAmount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * net_amount is proxy account's native token balance + total liquid tokens + total remaining rewards + total
       * unbonding balance
       * </pre>
       *
       * <code>string net_amount = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
       * @return This builder for chaining.
       */
      public Builder clearNetAmount() {
        
        netAmount_ = getDefaultInstance().getNetAmount();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * net_amount is proxy account's native token balance + total liquid tokens + total remaining rewards + total
       * unbonding balance
       * </pre>
       *
       * <code>string net_amount = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
       * @param value The bytes for netAmount to set.
       * @return This builder for chaining.
       */
      public Builder setNetAmountBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        netAmount_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object totalDelShares_ = "";
      /**
       * <pre>
       * total_del_shares define the delegation shares of all liquid validators
       * </pre>
       *
       * <code>string total_del_shares = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
       * @return The totalDelShares.
       */
      public java.lang.String getTotalDelShares() {
        java.lang.Object ref = totalDelShares_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          totalDelShares_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * total_del_shares define the delegation shares of all liquid validators
       * </pre>
       *
       * <code>string total_del_shares = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
       * @return The bytes for totalDelShares.
       */
      public com.google.protobuf.ByteString
          getTotalDelSharesBytes() {
        java.lang.Object ref = totalDelShares_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          totalDelShares_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * total_del_shares define the delegation shares of all liquid validators
       * </pre>
       *
       * <code>string total_del_shares = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
       * @param value The totalDelShares to set.
       * @return This builder for chaining.
       */
      public Builder setTotalDelShares(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        totalDelShares_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * total_del_shares define the delegation shares of all liquid validators
       * </pre>
       *
       * <code>string total_del_shares = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
       * @return This builder for chaining.
       */
      public Builder clearTotalDelShares() {
        
        totalDelShares_ = getDefaultInstance().getTotalDelShares();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * total_del_shares define the delegation shares of all liquid validators
       * </pre>
       *
       * <code>string total_del_shares = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
       * @param value The bytes for totalDelShares to set.
       * @return This builder for chaining.
       */
      public Builder setTotalDelSharesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        totalDelShares_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object totalLiquidTokens_ = "";
      /**
       * <pre>
       * total_liquid_tokens define the token amount worth of delegation shares of all liquid validator (slashing applied
       * amount)
       * </pre>
       *
       * <code>string total_liquid_tokens = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @return The totalLiquidTokens.
       */
      public java.lang.String getTotalLiquidTokens() {
        java.lang.Object ref = totalLiquidTokens_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          totalLiquidTokens_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * total_liquid_tokens define the token amount worth of delegation shares of all liquid validator (slashing applied
       * amount)
       * </pre>
       *
       * <code>string total_liquid_tokens = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @return The bytes for totalLiquidTokens.
       */
      public com.google.protobuf.ByteString
          getTotalLiquidTokensBytes() {
        java.lang.Object ref = totalLiquidTokens_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          totalLiquidTokens_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * total_liquid_tokens define the token amount worth of delegation shares of all liquid validator (slashing applied
       * amount)
       * </pre>
       *
       * <code>string total_liquid_tokens = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @param value The totalLiquidTokens to set.
       * @return This builder for chaining.
       */
      public Builder setTotalLiquidTokens(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        totalLiquidTokens_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * total_liquid_tokens define the token amount worth of delegation shares of all liquid validator (slashing applied
       * amount)
       * </pre>
       *
       * <code>string total_liquid_tokens = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @return This builder for chaining.
       */
      public Builder clearTotalLiquidTokens() {
        
        totalLiquidTokens_ = getDefaultInstance().getTotalLiquidTokens();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * total_liquid_tokens define the token amount worth of delegation shares of all liquid validator (slashing applied
       * amount)
       * </pre>
       *
       * <code>string total_liquid_tokens = 5 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @param value The bytes for totalLiquidTokens to set.
       * @return This builder for chaining.
       */
      public Builder setTotalLiquidTokensBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        totalLiquidTokens_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object totalRemainingRewards_ = "";
      /**
       * <pre>
       * total_remaining_rewards define the sum of remaining rewards of proxy account by all liquid validators
       * </pre>
       *
       * <code>string total_remaining_rewards = 6 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
       * @return The totalRemainingRewards.
       */
      public java.lang.String getTotalRemainingRewards() {
        java.lang.Object ref = totalRemainingRewards_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          totalRemainingRewards_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * total_remaining_rewards define the sum of remaining rewards of proxy account by all liquid validators
       * </pre>
       *
       * <code>string total_remaining_rewards = 6 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
       * @return The bytes for totalRemainingRewards.
       */
      public com.google.protobuf.ByteString
          getTotalRemainingRewardsBytes() {
        java.lang.Object ref = totalRemainingRewards_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          totalRemainingRewards_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * total_remaining_rewards define the sum of remaining rewards of proxy account by all liquid validators
       * </pre>
       *
       * <code>string total_remaining_rewards = 6 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
       * @param value The totalRemainingRewards to set.
       * @return This builder for chaining.
       */
      public Builder setTotalRemainingRewards(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        totalRemainingRewards_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * total_remaining_rewards define the sum of remaining rewards of proxy account by all liquid validators
       * </pre>
       *
       * <code>string total_remaining_rewards = 6 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
       * @return This builder for chaining.
       */
      public Builder clearTotalRemainingRewards() {
        
        totalRemainingRewards_ = getDefaultInstance().getTotalRemainingRewards();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * total_remaining_rewards define the sum of remaining rewards of proxy account by all liquid validators
       * </pre>
       *
       * <code>string total_remaining_rewards = 6 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
       * @param value The bytes for totalRemainingRewards to set.
       * @return This builder for chaining.
       */
      public Builder setTotalRemainingRewardsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        totalRemainingRewards_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object totalUnbondingBalance_ = "";
      /**
       * <pre>
       * total_unbonding_balance define the unbonding balance of proxy account by all liquid validator (slashing applied
       * amount)
       * </pre>
       *
       * <code>string total_unbonding_balance = 7 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @return The totalUnbondingBalance.
       */
      public java.lang.String getTotalUnbondingBalance() {
        java.lang.Object ref = totalUnbondingBalance_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          totalUnbondingBalance_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * total_unbonding_balance define the unbonding balance of proxy account by all liquid validator (slashing applied
       * amount)
       * </pre>
       *
       * <code>string total_unbonding_balance = 7 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @return The bytes for totalUnbondingBalance.
       */
      public com.google.protobuf.ByteString
          getTotalUnbondingBalanceBytes() {
        java.lang.Object ref = totalUnbondingBalance_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          totalUnbondingBalance_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * total_unbonding_balance define the unbonding balance of proxy account by all liquid validator (slashing applied
       * amount)
       * </pre>
       *
       * <code>string total_unbonding_balance = 7 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @param value The totalUnbondingBalance to set.
       * @return This builder for chaining.
       */
      public Builder setTotalUnbondingBalance(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        totalUnbondingBalance_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * total_unbonding_balance define the unbonding balance of proxy account by all liquid validator (slashing applied
       * amount)
       * </pre>
       *
       * <code>string total_unbonding_balance = 7 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @return This builder for chaining.
       */
      public Builder clearTotalUnbondingBalance() {
        
        totalUnbondingBalance_ = getDefaultInstance().getTotalUnbondingBalance();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * total_unbonding_balance define the unbonding balance of proxy account by all liquid validator (slashing applied
       * amount)
       * </pre>
       *
       * <code>string total_unbonding_balance = 7 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @param value The bytes for totalUnbondingBalance to set.
       * @return This builder for chaining.
       */
      public Builder setTotalUnbondingBalanceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        totalUnbondingBalance_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object proxyAccBalance_ = "";
      /**
       * <pre>
       * proxy_acc_balance define the balance of proxy account for the native token
       * </pre>
       *
       * <code>string proxy_acc_balance = 8 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @return The proxyAccBalance.
       */
      public java.lang.String getProxyAccBalance() {
        java.lang.Object ref = proxyAccBalance_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          proxyAccBalance_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * proxy_acc_balance define the balance of proxy account for the native token
       * </pre>
       *
       * <code>string proxy_acc_balance = 8 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @return The bytes for proxyAccBalance.
       */
      public com.google.protobuf.ByteString
          getProxyAccBalanceBytes() {
        java.lang.Object ref = proxyAccBalance_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          proxyAccBalance_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * proxy_acc_balance define the balance of proxy account for the native token
       * </pre>
       *
       * <code>string proxy_acc_balance = 8 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @param value The proxyAccBalance to set.
       * @return This builder for chaining.
       */
      public Builder setProxyAccBalance(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        proxyAccBalance_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * proxy_acc_balance define the balance of proxy account for the native token
       * </pre>
       *
       * <code>string proxy_acc_balance = 8 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @return This builder for chaining.
       */
      public Builder clearProxyAccBalance() {
        
        proxyAccBalance_ = getDefaultInstance().getProxyAccBalance();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * proxy_acc_balance define the balance of proxy account for the native token
       * </pre>
       *
       * <code>string proxy_acc_balance = 8 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @param value The bytes for proxyAccBalance to set.
       * @return This builder for chaining.
       */
      public Builder setProxyAccBalanceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        proxyAccBalance_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:crescent.liquidstaking.v1beta1.NetAmountState)
    }

    // @@protoc_insertion_point(class_scope:crescent.liquidstaking.v1beta1.NetAmountState)
    private static final crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState();
    }

    public static crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<NetAmountState>
        PARSER = new com.google.protobuf.AbstractParser<NetAmountState>() {
      @java.lang.Override
      public NetAmountState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NetAmountState(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<NetAmountState> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<NetAmountState> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public crescent.liquidstaking.v1beta1.Liquidstaking.NetAmountState getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface VotingPowerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:crescent.liquidstaking.v1beta1.VotingPower)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * voter defines the address of the voter; bech encoded in JSON.
     * </pre>
     *
     * <code>string voter = 1;</code>
     * @return The voter.
     */
    java.lang.String getVoter();
    /**
     * <pre>
     * voter defines the address of the voter; bech encoded in JSON.
     * </pre>
     *
     * <code>string voter = 1;</code>
     * @return The bytes for voter.
     */
    com.google.protobuf.ByteString
        getVoterBytes();

    /**
     * <pre>
     * staking_voting_power return the voting power of staking that can be exercised.
     * </pre>
     *
     * <code>string staking_voting_power = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The stakingVotingPower.
     */
    java.lang.String getStakingVotingPower();
    /**
     * <pre>
     * staking_voting_power return the voting power of staking that can be exercised.
     * </pre>
     *
     * <code>string staking_voting_power = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The bytes for stakingVotingPower.
     */
    com.google.protobuf.ByteString
        getStakingVotingPowerBytes();

    /**
     * <pre>
     * liquid_staking_voting_power return the voting power of liquid staking that can be exercised.
     * </pre>
     *
     * <code>string liquid_staking_voting_power = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The liquidStakingVotingPower.
     */
    java.lang.String getLiquidStakingVotingPower();
    /**
     * <pre>
     * liquid_staking_voting_power return the voting power of liquid staking that can be exercised.
     * </pre>
     *
     * <code>string liquid_staking_voting_power = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The bytes for liquidStakingVotingPower.
     */
    com.google.protobuf.ByteString
        getLiquidStakingVotingPowerBytes();

    /**
     * <pre>
     * validator_voting_power return the voting power of the validator if the voter is the validator operator that can be
     * exercised.
     * </pre>
     *
     * <code>string validator_voting_power = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The validatorVotingPower.
     */
    java.lang.String getValidatorVotingPower();
    /**
     * <pre>
     * validator_voting_power return the voting power of the validator if the voter is the validator operator that can be
     * exercised.
     * </pre>
     *
     * <code>string validator_voting_power = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The bytes for validatorVotingPower.
     */
    com.google.protobuf.ByteString
        getValidatorVotingPowerBytes();
  }
  /**
   * <pre>
   * VotingPower is type for current voting power of the voter including staking module's voting power and liquid staking
   * module's voting power, It depends on the amount of delegation of staking module, the bonded state of the delegated
   * validator, the value of btoken(liquid_bond_denom), and the pool coin and farming position containing btoken..
   * </pre>
   *
   * Protobuf type {@code crescent.liquidstaking.v1beta1.VotingPower}
   */
  public static final class VotingPower extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:crescent.liquidstaking.v1beta1.VotingPower)
      VotingPowerOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use VotingPower.newBuilder() to construct.
    private VotingPower(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private VotingPower() {
      voter_ = "";
      stakingVotingPower_ = "";
      liquidStakingVotingPower_ = "";
      validatorVotingPower_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new VotingPower();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private VotingPower(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              voter_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              stakingVotingPower_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              liquidStakingVotingPower_ = s;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              validatorVotingPower_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_VotingPower_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_VotingPower_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower.class, crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower.Builder.class);
    }

    public static final int VOTER_FIELD_NUMBER = 1;
    private volatile java.lang.Object voter_;
    /**
     * <pre>
     * voter defines the address of the voter; bech encoded in JSON.
     * </pre>
     *
     * <code>string voter = 1;</code>
     * @return The voter.
     */
    @java.lang.Override
    public java.lang.String getVoter() {
      java.lang.Object ref = voter_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        voter_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * voter defines the address of the voter; bech encoded in JSON.
     * </pre>
     *
     * <code>string voter = 1;</code>
     * @return The bytes for voter.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getVoterBytes() {
      java.lang.Object ref = voter_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        voter_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int STAKING_VOTING_POWER_FIELD_NUMBER = 2;
    private volatile java.lang.Object stakingVotingPower_;
    /**
     * <pre>
     * staking_voting_power return the voting power of staking that can be exercised.
     * </pre>
     *
     * <code>string staking_voting_power = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The stakingVotingPower.
     */
    @java.lang.Override
    public java.lang.String getStakingVotingPower() {
      java.lang.Object ref = stakingVotingPower_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        stakingVotingPower_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * staking_voting_power return the voting power of staking that can be exercised.
     * </pre>
     *
     * <code>string staking_voting_power = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The bytes for stakingVotingPower.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getStakingVotingPowerBytes() {
      java.lang.Object ref = stakingVotingPower_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stakingVotingPower_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LIQUID_STAKING_VOTING_POWER_FIELD_NUMBER = 3;
    private volatile java.lang.Object liquidStakingVotingPower_;
    /**
     * <pre>
     * liquid_staking_voting_power return the voting power of liquid staking that can be exercised.
     * </pre>
     *
     * <code>string liquid_staking_voting_power = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The liquidStakingVotingPower.
     */
    @java.lang.Override
    public java.lang.String getLiquidStakingVotingPower() {
      java.lang.Object ref = liquidStakingVotingPower_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        liquidStakingVotingPower_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * liquid_staking_voting_power return the voting power of liquid staking that can be exercised.
     * </pre>
     *
     * <code>string liquid_staking_voting_power = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The bytes for liquidStakingVotingPower.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLiquidStakingVotingPowerBytes() {
      java.lang.Object ref = liquidStakingVotingPower_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        liquidStakingVotingPower_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VALIDATOR_VOTING_POWER_FIELD_NUMBER = 4;
    private volatile java.lang.Object validatorVotingPower_;
    /**
     * <pre>
     * validator_voting_power return the voting power of the validator if the voter is the validator operator that can be
     * exercised.
     * </pre>
     *
     * <code>string validator_voting_power = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The validatorVotingPower.
     */
    @java.lang.Override
    public java.lang.String getValidatorVotingPower() {
      java.lang.Object ref = validatorVotingPower_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        validatorVotingPower_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * validator_voting_power return the voting power of the validator if the voter is the validator operator that can be
     * exercised.
     * </pre>
     *
     * <code>string validator_voting_power = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The bytes for validatorVotingPower.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getValidatorVotingPowerBytes() {
      java.lang.Object ref = validatorVotingPower_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        validatorVotingPower_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getVoterBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, voter_);
      }
      if (!getStakingVotingPowerBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, stakingVotingPower_);
      }
      if (!getLiquidStakingVotingPowerBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, liquidStakingVotingPower_);
      }
      if (!getValidatorVotingPowerBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, validatorVotingPower_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getVoterBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, voter_);
      }
      if (!getStakingVotingPowerBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, stakingVotingPower_);
      }
      if (!getLiquidStakingVotingPowerBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, liquidStakingVotingPower_);
      }
      if (!getValidatorVotingPowerBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, validatorVotingPower_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower)) {
        return super.equals(obj);
      }
      crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower other = (crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower) obj;

      if (!getVoter()
          .equals(other.getVoter())) return false;
      if (!getStakingVotingPower()
          .equals(other.getStakingVotingPower())) return false;
      if (!getLiquidStakingVotingPower()
          .equals(other.getLiquidStakingVotingPower())) return false;
      if (!getValidatorVotingPower()
          .equals(other.getValidatorVotingPower())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + VOTER_FIELD_NUMBER;
      hash = (53 * hash) + getVoter().hashCode();
      hash = (37 * hash) + STAKING_VOTING_POWER_FIELD_NUMBER;
      hash = (53 * hash) + getStakingVotingPower().hashCode();
      hash = (37 * hash) + LIQUID_STAKING_VOTING_POWER_FIELD_NUMBER;
      hash = (53 * hash) + getLiquidStakingVotingPower().hashCode();
      hash = (37 * hash) + VALIDATOR_VOTING_POWER_FIELD_NUMBER;
      hash = (53 * hash) + getValidatorVotingPower().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * VotingPower is type for current voting power of the voter including staking module's voting power and liquid staking
     * module's voting power, It depends on the amount of delegation of staking module, the bonded state of the delegated
     * validator, the value of btoken(liquid_bond_denom), and the pool coin and farming position containing btoken..
     * </pre>
     *
     * Protobuf type {@code crescent.liquidstaking.v1beta1.VotingPower}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:crescent.liquidstaking.v1beta1.VotingPower)
        crescent.liquidstaking.v1beta1.Liquidstaking.VotingPowerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_VotingPower_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_VotingPower_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower.class, crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower.Builder.class);
      }

      // Construct using crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        voter_ = "";

        stakingVotingPower_ = "";

        liquidStakingVotingPower_ = "";

        validatorVotingPower_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return crescent.liquidstaking.v1beta1.Liquidstaking.internal_static_crescent_liquidstaking_v1beta1_VotingPower_descriptor;
      }

      @java.lang.Override
      public crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower getDefaultInstanceForType() {
        return crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower.getDefaultInstance();
      }

      @java.lang.Override
      public crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower build() {
        crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower buildPartial() {
        crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower result = new crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower(this);
        result.voter_ = voter_;
        result.stakingVotingPower_ = stakingVotingPower_;
        result.liquidStakingVotingPower_ = liquidStakingVotingPower_;
        result.validatorVotingPower_ = validatorVotingPower_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower) {
          return mergeFrom((crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower other) {
        if (other == crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower.getDefaultInstance()) return this;
        if (!other.getVoter().isEmpty()) {
          voter_ = other.voter_;
          onChanged();
        }
        if (!other.getStakingVotingPower().isEmpty()) {
          stakingVotingPower_ = other.stakingVotingPower_;
          onChanged();
        }
        if (!other.getLiquidStakingVotingPower().isEmpty()) {
          liquidStakingVotingPower_ = other.liquidStakingVotingPower_;
          onChanged();
        }
        if (!other.getValidatorVotingPower().isEmpty()) {
          validatorVotingPower_ = other.validatorVotingPower_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object voter_ = "";
      /**
       * <pre>
       * voter defines the address of the voter; bech encoded in JSON.
       * </pre>
       *
       * <code>string voter = 1;</code>
       * @return The voter.
       */
      public java.lang.String getVoter() {
        java.lang.Object ref = voter_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          voter_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * voter defines the address of the voter; bech encoded in JSON.
       * </pre>
       *
       * <code>string voter = 1;</code>
       * @return The bytes for voter.
       */
      public com.google.protobuf.ByteString
          getVoterBytes() {
        java.lang.Object ref = voter_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          voter_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * voter defines the address of the voter; bech encoded in JSON.
       * </pre>
       *
       * <code>string voter = 1;</code>
       * @param value The voter to set.
       * @return This builder for chaining.
       */
      public Builder setVoter(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        voter_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * voter defines the address of the voter; bech encoded in JSON.
       * </pre>
       *
       * <code>string voter = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearVoter() {
        
        voter_ = getDefaultInstance().getVoter();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * voter defines the address of the voter; bech encoded in JSON.
       * </pre>
       *
       * <code>string voter = 1;</code>
       * @param value The bytes for voter to set.
       * @return This builder for chaining.
       */
      public Builder setVoterBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        voter_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object stakingVotingPower_ = "";
      /**
       * <pre>
       * staking_voting_power return the voting power of staking that can be exercised.
       * </pre>
       *
       * <code>string staking_voting_power = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @return The stakingVotingPower.
       */
      public java.lang.String getStakingVotingPower() {
        java.lang.Object ref = stakingVotingPower_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          stakingVotingPower_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * staking_voting_power return the voting power of staking that can be exercised.
       * </pre>
       *
       * <code>string staking_voting_power = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @return The bytes for stakingVotingPower.
       */
      public com.google.protobuf.ByteString
          getStakingVotingPowerBytes() {
        java.lang.Object ref = stakingVotingPower_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stakingVotingPower_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * staking_voting_power return the voting power of staking that can be exercised.
       * </pre>
       *
       * <code>string staking_voting_power = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @param value The stakingVotingPower to set.
       * @return This builder for chaining.
       */
      public Builder setStakingVotingPower(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        stakingVotingPower_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * staking_voting_power return the voting power of staking that can be exercised.
       * </pre>
       *
       * <code>string staking_voting_power = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @return This builder for chaining.
       */
      public Builder clearStakingVotingPower() {
        
        stakingVotingPower_ = getDefaultInstance().getStakingVotingPower();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * staking_voting_power return the voting power of staking that can be exercised.
       * </pre>
       *
       * <code>string staking_voting_power = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @param value The bytes for stakingVotingPower to set.
       * @return This builder for chaining.
       */
      public Builder setStakingVotingPowerBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        stakingVotingPower_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object liquidStakingVotingPower_ = "";
      /**
       * <pre>
       * liquid_staking_voting_power return the voting power of liquid staking that can be exercised.
       * </pre>
       *
       * <code>string liquid_staking_voting_power = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @return The liquidStakingVotingPower.
       */
      public java.lang.String getLiquidStakingVotingPower() {
        java.lang.Object ref = liquidStakingVotingPower_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          liquidStakingVotingPower_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * liquid_staking_voting_power return the voting power of liquid staking that can be exercised.
       * </pre>
       *
       * <code>string liquid_staking_voting_power = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @return The bytes for liquidStakingVotingPower.
       */
      public com.google.protobuf.ByteString
          getLiquidStakingVotingPowerBytes() {
        java.lang.Object ref = liquidStakingVotingPower_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          liquidStakingVotingPower_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * liquid_staking_voting_power return the voting power of liquid staking that can be exercised.
       * </pre>
       *
       * <code>string liquid_staking_voting_power = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @param value The liquidStakingVotingPower to set.
       * @return This builder for chaining.
       */
      public Builder setLiquidStakingVotingPower(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        liquidStakingVotingPower_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * liquid_staking_voting_power return the voting power of liquid staking that can be exercised.
       * </pre>
       *
       * <code>string liquid_staking_voting_power = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @return This builder for chaining.
       */
      public Builder clearLiquidStakingVotingPower() {
        
        liquidStakingVotingPower_ = getDefaultInstance().getLiquidStakingVotingPower();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * liquid_staking_voting_power return the voting power of liquid staking that can be exercised.
       * </pre>
       *
       * <code>string liquid_staking_voting_power = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @param value The bytes for liquidStakingVotingPower to set.
       * @return This builder for chaining.
       */
      public Builder setLiquidStakingVotingPowerBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        liquidStakingVotingPower_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object validatorVotingPower_ = "";
      /**
       * <pre>
       * validator_voting_power return the voting power of the validator if the voter is the validator operator that can be
       * exercised.
       * </pre>
       *
       * <code>string validator_voting_power = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @return The validatorVotingPower.
       */
      public java.lang.String getValidatorVotingPower() {
        java.lang.Object ref = validatorVotingPower_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          validatorVotingPower_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * validator_voting_power return the voting power of the validator if the voter is the validator operator that can be
       * exercised.
       * </pre>
       *
       * <code>string validator_voting_power = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @return The bytes for validatorVotingPower.
       */
      public com.google.protobuf.ByteString
          getValidatorVotingPowerBytes() {
        java.lang.Object ref = validatorVotingPower_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          validatorVotingPower_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * validator_voting_power return the voting power of the validator if the voter is the validator operator that can be
       * exercised.
       * </pre>
       *
       * <code>string validator_voting_power = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @param value The validatorVotingPower to set.
       * @return This builder for chaining.
       */
      public Builder setValidatorVotingPower(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        validatorVotingPower_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * validator_voting_power return the voting power of the validator if the voter is the validator operator that can be
       * exercised.
       * </pre>
       *
       * <code>string validator_voting_power = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @return This builder for chaining.
       */
      public Builder clearValidatorVotingPower() {
        
        validatorVotingPower_ = getDefaultInstance().getValidatorVotingPower();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * validator_voting_power return the voting power of the validator if the voter is the validator operator that can be
       * exercised.
       * </pre>
       *
       * <code>string validator_voting_power = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
       * @param value The bytes for validatorVotingPower to set.
       * @return This builder for chaining.
       */
      public Builder setValidatorVotingPowerBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        validatorVotingPower_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:crescent.liquidstaking.v1beta1.VotingPower)
    }

    // @@protoc_insertion_point(class_scope:crescent.liquidstaking.v1beta1.VotingPower)
    private static final crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower();
    }

    public static crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<VotingPower>
        PARSER = new com.google.protobuf.AbstractParser<VotingPower>() {
      @java.lang.Override
      public VotingPower parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new VotingPower(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<VotingPower> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<VotingPower> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public crescent.liquidstaking.v1beta1.Liquidstaking.VotingPower getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_crescent_liquidstaking_v1beta1_Params_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_crescent_liquidstaking_v1beta1_Params_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_crescent_liquidstaking_v1beta1_WhitelistedValidator_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_crescent_liquidstaking_v1beta1_WhitelistedValidator_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_crescent_liquidstaking_v1beta1_LiquidValidator_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_crescent_liquidstaking_v1beta1_LiquidValidator_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_crescent_liquidstaking_v1beta1_LiquidValidatorState_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_crescent_liquidstaking_v1beta1_LiquidValidatorState_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_crescent_liquidstaking_v1beta1_NetAmountState_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_crescent_liquidstaking_v1beta1_NetAmountState_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_crescent_liquidstaking_v1beta1_VotingPower_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_crescent_liquidstaking_v1beta1_VotingPower_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n2crescent/liquidstaking/v1beta1/liquids" +
      "taking.proto\022\036crescent.liquidstaking.v1b" +
      "eta1\032\024gogoproto/gogo.proto\032\031cosmos_proto" +
      "/cosmos.proto\032\036cosmos/base/v1beta1/coin." +
      "proto\032\037google/protobuf/timestamp.proto\032\034" +
      "google/api/annotations.proto\"\244\003\n\006Params\022" +
      "7\n\021liquid_bond_denom\030\001 \001(\tB\034\362\336\037\030yaml:\"li" +
      "quid_bond_denom\"\022{\n\026whitelisted_validato" +
      "rs\030\002 \003(\01324.crescent.liquidstaking.v1beta" +
      "1.WhitelistedValidatorB%\310\336\037\000\362\336\037\035yaml:\"wh" +
      "itelisted_validators\"\022c\n\020unstake_fee_rat" +
      "e\030\003 \001(\tBI\362\336\037\027yaml:\"unstake_fee_rate\"\332\336\037&" +
      "github.com/cosmos/cosmos-sdk/types.Dec\310\336" +
      "\037\000\022u\n\031min_liquid_staking_amount\030\005 \001(\tBR\362" +
      "\336\037 yaml:\"min_liquid_staking_amount\"\332\336\037&g" +
      "ithub.com/cosmos/cosmos-sdk/types.Int\310\336\037" +
      "\000:\010\210\240\037\000\230\240\037\000\"\264\001\n\024WhitelistedValidator\0227\n\021" +
      "validator_address\030\001 \001(\tB\034\362\336\037\030yaml:\"valid" +
      "ator_address\"\022]\n\rtarget_weight\030\002 \001(\tBF\362\336" +
      "\037\024yaml:\"target_weight\"\332\336\037&github.com/cos" +
      "mos/cosmos-sdk/types.Int\310\336\037\000:\004\210\240\037\000\"R\n\017Li" +
      "quidValidator\0225\n\020operator_address\030\001 \001(\tB" +
      "\033\362\336\037\027yaml:\"operator_address\":\010\350\240\037\000\210\240\037\000\"\364" +
      "\002\n\024LiquidValidatorState\0225\n\020operator_addr" +
      "ess\030\001 \001(\tB\033\362\336\037\027yaml:\"operator_address\"\022O" +
      "\n\006weight\030\002 \001(\tB?\362\336\037\ryaml:\"weight\"\332\336\037&git" +
      "hub.com/cosmos/cosmos-sdk/types.Int\310\336\037\000\022" +
      "?\n\006status\030\003 \001(\0162/.crescent.liquidstaking" +
      ".v1beta1.ValidatorStatus\022B\n\ndel_shares\030\004" +
      " \001(\tB.\332\336\037&github.com/cosmos/cosmos-sdk/t" +
      "ypes.Dec\310\336\037\000\022E\n\rliquid_tokens\030\005 \001(\tB.\332\336\037" +
      "&github.com/cosmos/cosmos-sdk/types.Int\310" +
      "\336\037\000:\010\350\240\037\000\210\240\037\000\"\362\004\n\016NetAmountState\022A\n\tmint" +
      "_rate\030\001 \001(\tB.\332\336\037&github.com/cosmos/cosmo" +
      "s-sdk/types.Dec\310\336\037\000\022K\n\023btoken_total_supp" +
      "ly\030\002 \001(\tB.\332\336\037&github.com/cosmos/cosmos-s" +
      "dk/types.Int\310\336\037\000\022B\n\nnet_amount\030\003 \001(\tB.\332\336" +
      "\037&github.com/cosmos/cosmos-sdk/types.Dec" +
      "\310\336\037\000\022H\n\020total_del_shares\030\004 \001(\tB.\332\336\037&gith" +
      "ub.com/cosmos/cosmos-sdk/types.Dec\310\336\037\000\022K" +
      "\n\023total_liquid_tokens\030\005 \001(\tB.\332\336\037&github." +
      "com/cosmos/cosmos-sdk/types.Int\310\336\037\000\022O\n\027t" +
      "otal_remaining_rewards\030\006 \001(\tB.\332\336\037&github" +
      ".com/cosmos/cosmos-sdk/types.Dec\310\336\037\000\022O\n\027" +
      "total_unbonding_balance\030\007 \001(\tB.\332\336\037&githu" +
      "b.com/cosmos/cosmos-sdk/types.Int\310\336\037\000\022I\n" +
      "\021proxy_acc_balance\030\010 \001(\tB.\332\336\037&github.com" +
      "/cosmos/cosmos-sdk/types.Int\310\336\037\000:\010\350\240\037\000\210\240" +
      "\037\001\"\231\002\n\013VotingPower\022\r\n\005voter\030\001 \001(\t\022L\n\024sta" +
      "king_voting_power\030\002 \001(\tB.\332\336\037&github.com/" +
      "cosmos/cosmos-sdk/types.Int\310\336\037\000\022S\n\033liqui" +
      "d_staking_voting_power\030\003 \001(\tB.\332\336\037&github" +
      ".com/cosmos/cosmos-sdk/types.Int\310\336\037\000\022N\n\026" +
      "validator_voting_power\030\004 \001(\tB.\332\336\037&github" +
      ".com/cosmos/cosmos-sdk/types.Int\310\336\037\000:\010\350\240" +
      "\037\000\210\240\037\000*\315\001\n\017ValidatorStatus\022@\n\034VALIDATOR_" +
      "STATUS_UNSPECIFIED\020\000\032\036\212\235 \032ValidatorStatu" +
      "sUnspecified\0226\n\027VALIDATOR_STATUS_ACTIVE\020" +
      "\001\032\031\212\235 \025ValidatorStatusActive\022:\n\031VALIDATO" +
      "R_STATUS_INACTIVE\020\002\032\033\212\235 \027ValidatorStatus" +
      "Inactive\032\004\210\243\036\000B<Z:github.com/crescent-ne" +
      "twork/crescent/x/liquidstaking/typesb\006pr" +
      "oto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf2.GoGoProtos.getDescriptor(),
          cosmos_proto.Cosmos.getDescriptor(),
          cosmos.base.v1beta1.CoinOuterClass.getDescriptor(),
          com.google.protobuf.TimestampProto.getDescriptor(),
          com.google.api.AnnotationsProto.getDescriptor(),
        });
    internal_static_crescent_liquidstaking_v1beta1_Params_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_crescent_liquidstaking_v1beta1_Params_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_crescent_liquidstaking_v1beta1_Params_descriptor,
        new java.lang.String[] { "LiquidBondDenom", "WhitelistedValidators", "UnstakeFeeRate", "MinLiquidStakingAmount", });
    internal_static_crescent_liquidstaking_v1beta1_WhitelistedValidator_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_crescent_liquidstaking_v1beta1_WhitelistedValidator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_crescent_liquidstaking_v1beta1_WhitelistedValidator_descriptor,
        new java.lang.String[] { "ValidatorAddress", "TargetWeight", });
    internal_static_crescent_liquidstaking_v1beta1_LiquidValidator_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_crescent_liquidstaking_v1beta1_LiquidValidator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_crescent_liquidstaking_v1beta1_LiquidValidator_descriptor,
        new java.lang.String[] { "OperatorAddress", });
    internal_static_crescent_liquidstaking_v1beta1_LiquidValidatorState_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_crescent_liquidstaking_v1beta1_LiquidValidatorState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_crescent_liquidstaking_v1beta1_LiquidValidatorState_descriptor,
        new java.lang.String[] { "OperatorAddress", "Weight", "Status", "DelShares", "LiquidTokens", });
    internal_static_crescent_liquidstaking_v1beta1_NetAmountState_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_crescent_liquidstaking_v1beta1_NetAmountState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_crescent_liquidstaking_v1beta1_NetAmountState_descriptor,
        new java.lang.String[] { "MintRate", "BtokenTotalSupply", "NetAmount", "TotalDelShares", "TotalLiquidTokens", "TotalRemainingRewards", "TotalUnbondingBalance", "ProxyAccBalance", });
    internal_static_crescent_liquidstaking_v1beta1_VotingPower_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_crescent_liquidstaking_v1beta1_VotingPower_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_crescent_liquidstaking_v1beta1_VotingPower_descriptor,
        new java.lang.String[] { "Voter", "StakingVotingPower", "LiquidStakingVotingPower", "ValidatorVotingPower", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.google.protobuf2.GoGoProtos.customtype);
    registry.add(com.google.protobuf2.GoGoProtos.enumvalueCustomname);
    registry.add(com.google.protobuf2.GoGoProtos.equal);
    registry.add(com.google.protobuf2.GoGoProtos.goprotoEnumPrefix);
    registry.add(com.google.protobuf2.GoGoProtos.goprotoGetters);
    registry.add(com.google.protobuf2.GoGoProtos.goprotoStringer);
    registry.add(com.google.protobuf2.GoGoProtos.moretags);
    registry.add(com.google.protobuf2.GoGoProtos.nullable);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.google.protobuf2.GoGoProtos.getDescriptor();
    cosmos_proto.Cosmos.getDescriptor();
    cosmos.base.v1beta1.CoinOuterClass.getDescriptor();
    com.google.protobuf.TimestampProto.getDescriptor();
    com.google.api.AnnotationsProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
